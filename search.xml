<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020 Flink forward 大会</title>
    <url>/2020/12/24/2020%20Flink%20forward%E5%A4%A7%E4%BC%9A/</url>
    <content><![CDATA[<h3 id="标准benchmark"><a href="#标准benchmark" class="headerlink" title="标准benchmark"></a>标准benchmark</h3><p>Steaming benchmark</p>
<h3 id="单节点重启"><a href="#单节点重启" class="headerlink" title="单节点重启"></a>单节点重启</h3><h3 id="非全局checkpoint"><a href="#非全局checkpoint" class="headerlink" title="非全局checkpoint"></a>非全局checkpoint</h3><a id="more"></a>
<h3 id="全链路数据实时化-to-实时离线一体化"><a href="#全链路数据实时化-to-实时离线一体化" class="headerlink" title="全链路数据实时化 to 实时离线一体化"></a>全链路数据实时化 to 实时离线一体化</h3><p>2021是元年</p>
<p>数据批量集成和增量集成一体化</p>
<p>技术栈分离</p>
<p>逻辑分离</p>
<p>团队分离</p>
<h3 id="数据湖-flink-iceberg-比较成熟"><a href="#数据湖-flink-iceberg-比较成熟" class="headerlink" title="数据湖 flink+iceberg 比较成熟"></a>数据湖 flink+iceberg 比较成熟</h3><p>支持数据更新</p>
<h3 id="PyFlink-AI-支持Python"><a href="#PyFlink-AI-支持Python" class="headerlink" title="PyFlink   AI 支持Python"></a>PyFlink   AI 支持Python</h3><h3 id="大数据和AI一体化"><a href="#大数据和AI一体化" class="headerlink" title="大数据和AI一体化"></a>大数据和AI一体化</h3><h4 id="Alink-开源算法"><a href="#Alink-开源算法" class="headerlink" title="Alink 开源算法"></a>Alink 开源算法</h4><h4 id="flink-AI-extended-alibaba"><a href="#flink-AI-extended-alibaba" class="headerlink" title="flink AI extended(alibaba)"></a>flink AI extended(alibaba)</h4><h5 id="DL-on-Flink"><a href="#DL-on-Flink" class="headerlink" title="DL on Flink"></a>DL on Flink</h5><h5 id="Flink-AI-Flow"><a href="#Flink-AI-Flow" class="headerlink" title="Flink AI Flow"></a>Flink AI Flow</h5><h3 id="Flink-Native-on-K8s"><a href="#Flink-Native-on-K8s" class="headerlink" title="Flink Native on K8s"></a>Flink Native on K8s</h3><h3 id="京东Flink"><a href="#京东Flink" class="headerlink" title="京东Flink"></a>京东Flink</h3><h4 id="容器化k8s部署，用物理机网络解决虚拟网络性能问题"><a href="#容器化k8s部署，用物理机网络解决虚拟网络性能问题" class="headerlink" title="容器化k8s部署，用物理机网络解决虚拟网络性能问题"></a>容器化k8s部署，用物理机网络解决虚拟网络性能问题</h4><h4 id="framework和业务日志隔离和级别动态配置"><a href="#framework和业务日志隔离和级别动态配置" class="headerlink" title="framework和业务日志隔离和级别动态配置"></a>framework和业务日志隔离和级别动态配置</h4><h4 id="窗口支持增量运算"><a href="#窗口支持增量运算" class="headerlink" title="窗口支持增量运算"></a>窗口支持增量运算</h4>]]></content>
      <categories>
        <category>技术趋势</category>
      </categories>
      <tags>
        <tag>Flink</tag>
        <tag>批流一体</tag>
      </tags>
  </entry>
  <entry>
    <title>Dynamic-PB-Parser：搞定Protobuf数据动态解析</title>
    <url>/2019/04/17/dynamic-pb-parser-%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><h3 id="核心痛点"><a href="#核心痛点" class="headerlink" title="核心痛点"></a>核心痛点</h3><p>使用ODPS(hive) SQL解析JSON数据的时候你可能用过get_json_object这个内置UDF，其灵活性给JSON数据解析带来了很多的便利。</p>
<p>但是对于Protobuf描述的数据，解析工作就麻烦太多了，即使解析一个字段，也要写一个完整的UDF(或UDTF)，并且上传各种protobuf的jar，然而这还没有完，如果新需求来了，即使仅改了一个字段的解析需求，也需要再重新开发一个新的UDF来完成。时间久了，项目里会有很多地方散落着各种Protobuf数据解析的逻辑，如果再有些公共逻辑改变，还要涉及到重构。维护工作繁重。<br><a id="more"></a></p>
<h3 id="本质原因"><a href="#本质原因" class="headerlink" title="本质原因"></a>本质原因</h3><p>出现以上问题的本质原因实际上是我们把“我们想要A字段”和“我们如何得到A字段”两件事给耦合在一起了。按照函数式的编程思想，“控制”和“逻辑”要分开，并且互不干扰，这个问题里，“我们如何得到A字段”就是控制，而“我们想要A字段”就是逻辑。</p>
<h3 id="破局"><a href="#破局" class="headerlink" title="破局"></a>破局</h3><p>既然找到了耦合点，想办法解耦就是出路了。<br>首先，定义一套描述字段路径的语法规则，让它去表达“我们想要A字段”这件事；然后，开发一个可以解析这套语法的程序（类似编译器），去完成“我们如何得到A字段”这件事。这样就可以让两件事互相独立演进了。至此， <code>Dynamic-PB-Parser</code>也就呼之欲出了。</p>
<h2 id="Dynamic-PB-Parser-能做什么"><a href="#Dynamic-PB-Parser-能做什么" class="headerlink" title="Dynamic-PB-Parser 能做什么"></a><code>Dynamic-PB-Parser</code> 能做什么</h2><p>一句话概括<code>Dynamic-PB-Parser</code>的功能：</p>
<blockquote>
<p>按一种简单的语法规则描述字段路径，并动态解析Protobuf数据中对应的字段值。</p>
</blockquote>
<h3 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DynamicPBParser parser = DynamicPBParser.newBuilder()  </span><br><span class="line">.descFilePath(<span class="string">"xxx/xxx.desc"</span>)  </span><br><span class="line">.syntax(<span class="string">"StandardSyntax"</span>)  </span><br><span class="line">.build(); </span><br><span class="line">String name = parser.parse(content, <span class="string">'me.lihongyu.bean.Person$name'</span>);  </span><br><span class="line">BrandType brandType = parser.parse(content, <span class="string">'me.lihongyu.bean.Person$cloth.brand.type'</span>);  </span><br><span class="line">String email = parser.parse(parser.parse(content, <span class="string">'me.lihongyu.bean.Person$proto_data'</span>), <span class="string">'me.lihongyu.bean.AddressBook$email'</span>);</span><br><span class="line">;</span><br></pre></td></tr></table></figure>
<h2 id="Dynamic-PB-Parser-怎么做的"><a href="#Dynamic-PB-Parser-怎么做的" class="headerlink" title="Dynamic-PB-Parser 怎么做的"></a><code>Dynamic-PB-Parser</code> 怎么做的</h2><p>总体的思路：动态拿到schema(也就是message的定义)，用schema解析pb的数据得到一个完整对象，沿着字段路径，不断循环得到下一级对象直到最后一级。一图胜千言：<br><img src="http://ata2-img.cn-hangzhou.img-pub.aliyun-inc.com/acda938c9e08972c18fb2217c0fab686.png" alt="图片.png"></p>
<h3 id="实现过程中的一些细节"><a href="#实现过程中的一些细节" class="headerlink" title="实现过程中的一些细节"></a>实现过程中的一些细节</h3><h4 id="可扩展的语法接口"><a href="#可扩展的语法接口" class="headerlink" title="可扩展的语法接口"></a>可扩展的语法接口</h4><p>在<code>Dynamic-PB-Parser</code>里定义了<code>Syntax</code>接口，其中定义了语法相关的解析逻辑，实现此接口，可以自定义一套自己的字段路径语法规则。默认提供的标准语法类似这样：<code>pkg1.XXX $ field1.field2[*].(pkg1.extension_field)[1]</code>，既支持数据，也支持用<code>()</code>表达的扩展字段。详细介绍见参考中的ATA文章。</p>
<h4 id="获取FieldValue"><a href="#获取FieldValue" class="headerlink" title="获取FieldValue"></a>获取FieldValue</h4><p>按FieldDescriptor获取FieldValue时，如果是扩展字段，需要在<code>UnknownFields</code>里找到字段值，并按不同字段类型选择不同的取值逻辑。</p>
<table>
<thead>
<tr>
<th>字段值存储位置(in Field)</th>
<th>字段类型</th>
<th>取值逻辑</th>
</tr>
</thead>
<tbody>
<tr>
<td>VarintList</td>
<td>ENUM</td>
<td>按ENUM定义的序号获取</td>
</tr>
<tr>
<td>VarintList</td>
<td>BOOLEAN</td>
<td>0代表FALSE、1代表TRUE</td>
</tr>
<tr>
<td>VarintList</td>
<td>INT</td>
<td>直接取VarintList[0]</td>
</tr>
<tr>
<td>VarintList</td>
<td>LONG</td>
<td>直接取VarintList[0]</td>
</tr>
<tr>
<td>Fixed32List</td>
<td>FLOAT</td>
<td>将用int表达的字节转为float：Float.intBitsToFloat</td>
</tr>
<tr>
<td>Fixed64List</td>
<td>DOUBLE</td>
<td>将用long表达的字节转为double：Double.longBitsToDouble</td>
</tr>
<tr>
<td>LengthDelimitedList</td>
<td>MESSAGE</td>
<td>DynamicMessage.parseFrom(LengthDelimitedList[0])</td>
</tr>
<tr>
<td>LengthDelimitedList</td>
<td>STRING</td>
<td>LengthDelimitedList[0].toStringUtf8()</td>
</tr>
<tr>
<td>LengthDelimitedList</td>
<td>BYTE_STRING</td>
<td>直接输出LengthDelimitedList[0]</td>
</tr>
</tbody>
</table>
<h2 id="Dynamic-PB-Parser-的性能优化"><a href="#Dynamic-PB-Parser-的性能优化" class="headerlink" title="Dynamic-PB-Parser 的性能优化"></a><code>Dynamic-PB-Parser</code> 的性能优化</h2><h3 id="解析逻辑的两个阶段"><a href="#解析逻辑的两个阶段" class="headerlink" title="解析逻辑的两个阶段"></a>解析逻辑的两个阶段</h3><p><code>Dynamic-PB-Parser</code>将解析逻辑分为<code>load</code>和<code>parse</code>两个阶段：</p>
<ol>
<li><code>load</code>阶段完成schema的加载过程，其中包括了对扩展字段的schema处理</li>
<li><code>parse</code>阶段完成字段路径的解析，和按路径逐步找到字段值的功能</li>
</ol>
<h3 id="通过缓存减少重复的parse逻辑"><a href="#通过缓存减少重复的parse逻辑" class="headerlink" title="通过缓存减少重复的parse逻辑"></a>通过缓存减少重复的parse逻辑</h3><ol>
<li><code>descriptorCache</code>在<code>load</code>阶段初始化，缓存了descriptorName和descriptor的对应关系，在同一个JVM里只需要初始化一次即可</li>
<li><code>extensionFieldCache</code>在<code>load</code>阶段初始化，缓存了desc文件里全部扩展字段名和扩展字段实例的对应关系。用于后续解析扩展字段时提取FieldDescriptor</li>
<li><code>fieldPathCache</code>在<code>parse</code>阶段初始化，缓存了完整字段路径和字段拆分后结果的对应关系。避免每次都需要做split和对<code>()</code>表达的扩展字段路径的解析</li>
<li><code>fieldNameCache</code>和<code>fieldIndexCache</code>在<code>parse</code>阶段初始化，分别缓存了field和fieldName（<code>abc[*]-&gt;abc</code>），以及field和fieldIndex（<code>abc[*]-&gt;*</code>）的对应关系，避免每次解析都要执行正则匹配。</li>
</ol>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p><code>Dynamic-PB-Parser</code>具体的实现细节还有很多，感兴趣的同学可以checkout Github repo。虽然不是什么高深的技术，但是背后也是对“控制和逻辑正交”的函数式编程思维的一次成功实践。<br>由于所在项目组的特殊性，这种用Protobuf描述的数据又非常多且普遍，用传统的protobuf的解析方式给开发人员的维护工作带来了很大痛苦，因此开发了<code>Dynamic-PB-Parser</code>这个工具，希望能帮助到更多和我有类似问题的开发同学。</p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>hive UDFJson:<a href="https://github.com/apache/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFJson.java" target="_blank" rel="noopener">https://github.com/apache/hive/blob/master/ql/src/java/org/apache/hadoop/hive/ql/udf/UDFJson.java</a><br>github：<a href="https://github.com/lhyundeadsoul/pb-parser" target="_blank" rel="noopener">https://github.com/lhyundeadsoul/pb-parser</a><br>欢迎提issue和MR</p>
]]></content>
      <categories>
        <category>开源产品</category>
      </categories>
      <tags>
        <tag>pb-parser</tag>
      </tags>
  </entry>
  <entry>
    <title>《一课经济学》</title>
    <url>/2022/05/01/%E3%80%8A%E4%B8%80%E8%AF%BE%E7%BB%8F%E6%B5%8E%E5%AD%A6%E3%80%8B%E8%AF%BB%E5%90%8E%E6%84%9F/</url>
    <content><![CDATA[<h3 id="核心要义"><a href="#核心要义" class="headerlink" title="核心要义"></a>核心要义</h3><p> 当考虑一个行为的影响时，要在时间和空间两个维度上扩大思考范围。不仅要观察其对若干特殊利益集团的短期影响，也要考察其对整个社会利益的长期影响。</p>
<blockquote>
<p>时间上，看长期<br>空间上，看全局<br>社会是一个混沌、耦合的整体</p>
</blockquote>
<a id="more"></a>
<h3 id="重点细节"><a href="#重点细节" class="headerlink" title="重点细节"></a>重点细节</h3><ol>
<li><strong>拯救X产业（农产品等；手段：关税、限产限价等）</strong> 只看局部影响，保护了个别生产者，让其他行业的人来买单，降低了整个社会的生产效率。竞争力弱的产业应该自然消亡，释放资本和人力去效率更高的行业</li>
<li><strong>充分就业</strong>生产最大化是目的，充分就业只是手段，不能本末倒置</li>
<li><strong>国际贸易</strong>和国内人与人之间的贸易没有本质区别。出口（销售）是为了进口（采购）给自己更好的生活品质。一个国家需要出口的真正理由是赚钱来支付进口，无它</li>
<li><strong>最低工资法</strong> 工资本质上来自于生产，而不是政府的法令。最低工资的设定，实际上剥夺了最低收入群体这部分人获得工作的权利。和农产品最低保障价格本质上是一样的。</li>
<li><strong>工会</strong>等一切阻碍<code>资本流动，科技创新</code>的行为都会在本质上降低工资</li>
<li><strong>货币</strong>也是一种特殊的商品，也有升值和贬值的时候。</li>
<li><strong>储蓄</strong> 也是投资的一种，储蓄钱会被别人拿去投资，钱本身永远在流动。主动投资：自己拿钱主动参与再分配；储蓄：把钱给银行拿去投资，被动参与再分配。</li>
<li><code>财富 = 现金+商品或服务</code> 以及 <code>社会总财富 = 可流动资金 * 流动速度</code></li>
<li>社会视角：<code>总财富=不可流动资金（银行准备金）+可流动资金</code></li>
<li>个人视角：<code>可流动资金=投资+消费=（储蓄+个人投资）+消费</code></li>
</ol>
]]></content>
      <categories>
        <category>读后感</category>
      </categories>
      <tags>
        <tag>经济学</tag>
      </tags>
  </entry>
  <entry>
    <title>《家庭财务管理》笔记</title>
    <url>/2022/03/08/%E3%80%8A%E5%AE%B6%E5%BA%AD%E8%B4%A2%E5%8A%A1%E7%AE%A1%E7%90%86%E3%80%8B%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol>
<li><strong>财务管理</strong>本质是<strong>事务管理</strong>，而不是投资赚钱</li>
<li>财务管理就是定目标、选策略、用工具（理财工具、负债工具）</li>
<li><strong>目标事务</strong>：医疗&gt;买房&gt;养老（生存问题）&gt;教育（发展问题）<ol>
<li>日常开支账户：随时保证3-6个月应急储备，不能动</li>
</ol>
</li>
</ol>
<a id="more"></a>
<ol start="4">
<li><strong>理财工具</strong><ol>
<li>明确为什么事而理财更重要！旅行？教育？专款专用</li>
<li>三步法确定理财方案：事务的时间点、可以承担的风险、可以参与的本金（本金=收入-日常-储蓄-负债）</li>
<li>收入盈余（就是上一条的本金）20-50万的，防守:稳定:进攻=2:7:1</li>
</ol>
</li>
<li><strong>负债工具</strong><ol>
<li>负债是一种未来收入折现的现金流管理方案，可以提供流动性，是中性的产品</li>
<li>刚性支出可负债，柔性支出酌情负债，投资支出不可负债</li>
<li>健康负责标准：收入-日常消费-储蓄&gt;负债</li>
</ol>
</li>
<li><strong>健康是第一要务</strong><ol>
<li>小病：医保+普惠医疗（京惠保？）</li>
<li>中病：医疗险-&gt;保医疗费用（保当下）</li>
<li>重疾：重疾险-&gt;赔付（保未来）<ol>
<li>保额=5年生活支出总额（重疾平均5年治疗期）</li>
<li>消费型（保额大）要优先于储蓄型（有返还），因为这笔钱就是要解决重疾问题</li>
</ol>
</li>
</ol>
</li>
<li><strong>买房</strong><ol>
<li>自住？投资？逻辑完全不同</li>
<li>房贷占收入比40-60%</li>
</ol>
</li>
<li><strong>孩子</strong>，只需要关注健康和教育<ol>
<li>健康：“一老一小”</li>
<li>教育：非义务教育阶段（高中、大学）的规划</li>
<li>自己的优先级要高于孩子</li>
</ol>
</li>
<li><strong>养老</strong>，未来百岁人生是常态，需要有三个账户处理养老问题<ol>
<li>日常支出：社保养老、房租养老、商业养老</li>
<li>应急支出：储蓄、重疾险</li>
<li>休闲支出：剩余闲钱，可承担一定风险</li>
<li>养老三阶段：自由养老、居家养老、介入式养老；花钱由少变多</li>
</ol>
</li>
<li><strong>遗产传承</strong>，每个家庭的标准动作，不是富人的专利<ol>
<li>传：钱给谁？给多少？怎么给？什么时间给？<ol>
<li>立遗嘱：找律师，录视频，避免家庭纠纷</li>
<li>现金杠杆：保险（年金保险）</li>
</ol>
</li>
<li>承：要下一代用得好这笔钱：信托、慈善基金会</li>
</ol>
</li>
</ol>
<h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><ul>
<li style="list-style: none"><input type="checkbox"> 应急账户</li>
<li style="list-style: none"><input type="checkbox"> 医疗保险不足</li>
<li style="list-style: none"><input type="checkbox"> 养老保险不足</li>
<li style="list-style: none"><input type="checkbox"> 理财目标不明确，没有做到专款专用</li>
<li style="list-style: none"><input type="checkbox"> 盈余理财结构不合理</li>
<li style="list-style: none"><input type="checkbox"> 京惠保？</li>
<li style="list-style: none"><input type="checkbox"> 教育规划不明确？</li>
</ul>
]]></content>
      <categories>
        <category>读后感</category>
      </categories>
      <tags>
        <tag>理财</tag>
      </tags>
  </entry>
  <entry>
    <title>《文明、现代化、价值投资与中国》</title>
    <url>/2020/10/27/%E3%80%8A%E6%96%87%E6%98%8E%E3%80%81%E7%8E%B0%E4%BB%A3%E5%8C%96%E3%80%81%E4%BB%B7%E5%80%BC%E6%8A%95%E8%B5%84%E4%B8%8E%E4%B8%AD%E5%9B%BD%E3%80%8B/</url>
    <content><![CDATA[<h2 id="文明划分的维度"><a href="#文明划分的维度" class="headerlink" title="文明划分的维度"></a>文明划分的维度</h2><ol>
<li>能量的汲取能力</li>
<li>社会单元组织动员能力</li>
<li>科技实力</li>
</ol>
<a id="more"></a>
<h2 id="现代化的定义"><a href="#现代化的定义" class="headerlink" title="现代化的定义"></a>现代化的定义</h2><p><code>现代化 = 现代科技 × 自由市场经济</code></p>
<p>自由市场：自由商品交换 1+1&gt;2，自由的知识 1+1&gt;4</p>
<h2 id="当前国际发展的刚性限制"><a href="#当前国际发展的刚性限制" class="headerlink" title="当前国际发展的刚性限制"></a>当前国际发展的刚性限制</h2><h3 id="市场越大效率越高，所以最终全球只会有一个大市场"><a href="#市场越大效率越高，所以最终全球只会有一个大市场" class="headerlink" title="市场越大效率越高，所以最终全球只会有一个大市场"></a>市场越大效率越高，所以最终全球只会有一个大市场</h3><p>3.0文明铁律：最大的市场终将成为唯一的市场</p>
<h3 id="核武器时代下的共同毁灭原则（Mutually-Assured-Destruction）M-A-D机制"><a href="#核武器时代下的共同毁灭原则（Mutually-Assured-Destruction）M-A-D机制" class="headerlink" title="核武器时代下的共同毁灭原则（Mutually Assured Destruction）M.A.D机制"></a>核武器时代下的共同毁灭原则（Mutually Assured Destruction）M.A.D机制</h3><h3 id="全人类合作关联成一个整体"><a href="#全人类合作关联成一个整体" class="headerlink" title="全人类合作关联成一个整体"></a>全人类合作关联成一个整体</h3><p>温室气体排放、极端恐怖分子、金融危机</p>
<h2 id="价值投资"><a href="#价值投资" class="headerlink" title="价值投资"></a>价值投资</h2><h3 id="四个理念"><a href="#四个理念" class="headerlink" title="四个理念"></a>四个理念</h3><ol>
<li>股票不仅是可以买卖的证券，实际上是代表对公司所有权的证书。</li>
<li>市场是证券买卖的工具，并不是老师。它只告诉你价格，不会告诉你价值</li>
<li>投资要留有安全边际，公司市场价格远远低于内在价值时买入</li>
<li>建立自己的能力圈，赚能力圈里的钱。能力圈是边界，没有边界的能力不是真的能力。如果你 一个观点，你必须要能够告诉我这个观点不成立的条件，这时它才是一个真正的观点</li>
</ol>
]]></content>
      <categories>
        <category>读后感</category>
      </categories>
      <tags>
        <tag>历史</tag>
        <tag>文明</tag>
        <tag>经济</tag>
        <tag>投资</tag>
      </tags>
  </entry>
  <entry>
    <title>Why do we need Paxos and and How it works</title>
    <url>/2022/06/30/Why-do-we-need-Paxos-and-and-How-it-works/</url>
    <content><![CDATA[<blockquote>
<p>参考<a href="https://blog.openacid.com/algo/paxos/" target="_blank" rel="noopener">《可靠分布式系统-paxos的直观解释》</a></p>
</blockquote>
<pre class="mermaid" style="text-align: center;">
            journey
            %%{init: {'theme':'default'}}%%
	title Why do we need Paxos？How it works?
	section 单机
		单机: 1 : 可用性低
	section 多副本
		异步复制:  2: 一致性低
		同步复制:  2: 可用性低
		半同步复制:  3: 一致性低, 2个写并发导致2个状态
		多数派读写+时间戳: 5: 一致性低, client宕机导致读到2个状态, 2并发写覆盖
	section Paxos
		写前读: 7
          </pre>
<a id="more"></a>
<p>一些方便理解的重点</p>
<ul>
<li>每个Paxos实例只维护一个值的状态</li>
<li>每个Paxos实例有多轮（Round）尝试写入，每个Round有2个Phase(Phase-1 写前读，Phase-2 写)，只有Phase-1和Phase-2之间没有任何其他终端进行过Phase-1和Phase-2时才能成功完成Phase-2</li>
<li>客户端取到时间戳不一致的两个不同值时，有义务让更早的向更新的版本去对齐</li>
<li>每个Round都必然有且仅有一个多数派读，但是不一定有多数派写（可能Phase-2之前有更新的Round的Phase-1出现）</li>
</ul>
<p><em>mermaid 的图有遮盖，看下面这个脑补看不到的汉字吧 :)</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">journey</span><br><span class="line">	title Why do we need Paxos？How it works?</span><br><span class="line">	section 单机</span><br><span class="line">		单机: 1 : 可用性低</span><br><span class="line">	section 多副本</span><br><span class="line">		异步复制:  2: 一致性低</span><br><span class="line">		同步复制:  2: 可用性低</span><br><span class="line">		半同步复制:  3: 一致性低, 2个写并发导致2个状态</span><br><span class="line">		多数派读写+时间戳: 5: 一致性低, client宕机导致读到2个状态, 2并发写覆盖</span><br><span class="line">	section Paxos</span><br><span class="line">		写前读: 7</span><br></pre></td></tr></table></figure>
<h3 id="Raft-动画演示"><a href="#Raft-动画演示" class="headerlink" title="Raft 动画演示"></a>Raft 动画演示</h3><p><a href="http://www.kailing.pub/raft/index.html" target="_blank" rel="noopener">http://www.kailing.pub/raft/index.html</a></p>
]]></content>
      <tags>
        <tag>一致性共识</tag>
      </tags>
  </entry>
  <entry>
    <title>一个产品开发的复杂度都是怎么被解决的？</title>
    <url>/2021/03/28/%E4%B8%80%E4%B8%AA%E4%BA%A7%E5%93%81%E5%BC%80%E5%8F%91%E7%9A%84%E5%A4%8D%E6%9D%82%E5%BA%A6%E9%83%BD%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E8%A7%A3%E5%86%B3%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<p><img src="/images/产品复杂度及对策.jpg" alt></p>
<a id="more"></a>
<p>本质复杂度无论用什么技术和工具都是不会解决的；<br>而偶然复杂度正在被 Low-code/Serveless/SerivceMesh 逐步简化，如果你的能力只体现在这部分，那么你应该对自己的可替代性提起注意了</p>
<h2 id="纯后端"><a href="#纯后端" class="headerlink" title="纯后端"></a>纯后端</h2><h3 id="Low-code"><a href="#Low-code" class="headerlink" title="Low code"></a>Low code</h3><p>简单业务逻辑可视化编程<br><img src="https://ucc.alicdn.com/pic/developer-ecology/0c60af73ee8b4c67a6d1f6bf61356099.png" alt></p>
<h3 id="Serveless"><a href="#Serveless" class="headerlink" title="Serveless"></a>Serveless</h3><p>docker+k8s解决web开发中横向扩展的问题</p>
<h3 id="ServiceMesh"><a href="#ServiceMesh" class="headerlink" title="ServiceMesh"></a>ServiceMesh</h3><p>解决web开发中纵向逻辑拆分的问题：业务逻辑和中间件逻辑</p>
<h2 id="前后端协作"><a href="#前后端协作" class="headerlink" title="前后端协作"></a>前后端协作</h2><h3 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h3><ol>
<li>web开发本质上是在做一个信息流，流动的双方是前端 和 后端，前端是后端 的client，后端 是前端 的数据库</li>
<li>数据库有一个很好的设计 ，就是用sql表达”我要什么数据”， 用sql解析器和存储引擎表达”我怎么得到数据”</li>
<li>因此，给前端 一个QL，让真正对数据有需求的前端 表达”我要什么数据”，让数据拥有者只解决怎么得到数据的问题</li>
<li>GraphQL诞生</li>
</ol>
]]></content>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>一个人工智能的诞生</title>
    <url>/2021/01/02/%E4%B8%80%E4%B8%AA%E4%BA%BA%E5%B7%A5%E6%99%BA%E8%83%BD%E7%9A%84%E8%AF%9E%E7%94%9F/</url>
    <content><![CDATA[<h1 id="一个人工智能的诞生"><a href="#一个人工智能的诞生" class="headerlink" title="一个人工智能的诞生"></a>一个人工智能的诞生</h1><h2 id="智能即分类"><a href="#智能即分类" class="headerlink" title="智能即分类"></a>智能即分类</h2><a id="more"></a>
<h3 id="让数据可被分类"><a href="#让数据可被分类" class="headerlink" title="让数据可被分类"></a>让数据可被分类</h3><ol>
<li>增加层数<ol>
<li>目的：改变坐标系</li>
<li>那改变坐标系的目的是什么呢？是因为一些在原坐标系下交叉的数据用线性结构（直线、平面、超平面）无法分开；要想分开，要结合改变坐标系和数据重分布两个手段</li>
</ol>
</li>
<li>增加激活函数<ol>
<li>目的：引入非线性变换，让数据重新分布。被激活函数作用后的数据会有机会重新分开</li>
</ol>
</li>
<li>增加维度<ol>
<li>目的：让低维中的数据在高维空间中变得稀疏，从而可分开</li>
</ol>
</li>
</ol>
<h3 id="通过不断的迭代，让数据真的被分开"><a href="#通过不断的迭代，让数据真的被分开" class="headerlink" title="通过不断的迭代，让数据真的被分开"></a>通过不断的迭代，让数据真的被分开</h3><ol>
<li>增加loss函数<ol>
<li>目的：给逼近“真相”一个依据，让loss函数的值最小即是模型的最终形态</li>
</ol>
</li>
<li>增加学习率<ol>
<li>目的：让梯度下降找loss函数最小值的过程既不要太慢，也不要因为太快而找不到真正的最小值</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>人工智能</tag>
      </tags>
  </entry>
  <entry>
    <title>一些工作方式心得</title>
    <url>/2020/03/04/%E4%B8%80%E4%BA%9B%E5%B7%A5%E4%BD%9C%E6%96%B9%E5%BC%8F%E5%BF%83%E5%BE%97/</url>
    <content><![CDATA[<ol>
<li><p>自身</p>
<ol>
<li>关于思考方式<ol>
<li>空间域：结构化思考：点线面体</li>
<li>时间域：终局思维</li>
<li>问题域：<ol>
<li>定义问题、关键字、解题</li>
<li>问题是。。。方案有1。。2。。。因为xxxx的原因，我推荐方案xxx</li>
</ol>
</li>
</ol>
</li>
<li>关于行事方式<ol>
<li>反复复盘总结、抽象</li>
</ol>
</li>
</ol>
</li>
<li><p>与合作方的桥梁</p>
<ol>
<li>关于沟通<ol>
<li>保持高频又高效的沟通</li>
<li>YES! AND!</li>
</ol>
</li>
</ol>
</li>
<li><p>合作方</p>
<ol>
<li>关于同事<ol>
<li>每个人都有太多问题了，看到这个不难，还是加油看看别人的闪光点吧</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <tags>
        <tag>心领神会</tag>
      </tags>
  </entry>
  <entry>
    <title>《还原真实的美联储》</title>
    <url>/2022/12/02/%E3%80%8A%E8%BF%98%E5%8E%9F%E7%9C%9F%E5%AE%9E%E7%9A%84%E7%BE%8E%E8%81%94%E5%82%A8%E3%80%8B/</url>
    <content><![CDATA[<ol>
<li>美联储是一个分权制衡的组织结构，独立运营且不受个别机构控制</li>
<li>通过调节短期利率影响长期利率<ol>
<li>金融危机时直接影响长期利率</li>
</ol>
</li>
<li>美联储的货币政策瞄准的是“<strong>通胀率2%</strong>”，而不是货币供应量等其它指标</li>
<li><strong> 社会运转效率（资金运转效率，资源优化配置效率，人才流动效率等）是一切金融现象背后的本质。</strong><a id="more"></a>
<ol>
<li>以日本为例<ol>
<li>当下的局面：滞胀<ol>
<li>高通胀</li>
<li>低增长</li>
<li>高失业</li>
</ol>
</li>
<li>原因<ol>
<li>劳动力市场不灵活（人才流动效率低）</li>
<li>银行给低效企业输血（优化配置效率低）</li>
</ol>
</li>
</ol>
</li>
<li>以中国开放国际资本市场为例 <ol>
<li>先提高国内市场经济效率（利率市场化等）【先把自己的效率提上来，和国际拉齐，再开放才能平稳】</li>
<li>再放弃固定汇率</li>
</ol>
</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>读后感</category>
      </categories>
      <tags>
        <tag>经济</tag>
        <tag>美联储</tag>
        <tag>金融</tag>
      </tags>
  </entry>
  <entry>
    <title>为什么TDengine 这么秀</title>
    <url>/2020/12/23/%E4%B8%BA%E4%BB%80%E4%B9%88TDengine%20%E8%BF%99%E4%B9%88%E7%A7%80/</url>
    <content><![CDATA[<p>听了陶老师的分享，很有收获，摘录了一些细节，备用，同时也可以和<a href="https://lihongyu.me/2020/05/12/%E5%9C%A8%E7%BA%BF%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E8%AE%BA/">《在线服务设计方法论》</a>很好的契合起来。</p>
<a id="more"></a>
<p>以下</p>
<ol>
<li>快：利用了物联网大数据的十个特点</li>
<li>小 2.7MB：不利用第三方开源软件</li>
<li>技术创新<ol>
<li>性能<ol>
<li>一个采集点一张表（本质是动静数据分离，采集点的静态数据只存一次，表里只有动态数据，就可以做成只追加，不修改了。同时数据波动范围是稳定的）</li>
<li>列存，给数据压缩提供土壤</li>
<li>按块存储，块内连续存储，块索引</li>
<li>两级索引：标签（本质是空间索引），时序数据（本质是时间索引）</li>
<li>资源利用<ol>
<li>按时间分区、按vnode（含一个或多个采集点）分片</li>
<li>多级存储：内存-&gt;SSD-&gt;HD-&gt;S3</li>
</ol>
</li>
</ol>
</li>
<li>高可靠<ol>
<li>write ahead log    WAL</li>
</ol>
</li>
<li>高可用<ol>
<li>Master-slave 多副本</li>
</ol>
</li>
</ol>
</li>
<li>其它亮点<ol>
<li>滑动窗口+聚合时间段 分开表达</li>
<li>数据订阅</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>设计原则</tag>
      </tags>
  </entry>
  <entry>
    <title>关于大数据的几个结论</title>
    <url>/2021/07/07/%E5%85%B3%E4%BA%8E%E5%A4%A7%E6%95%B0%E6%8D%AE%E7%9A%84%E5%87%A0%E4%B8%AA%E8%AE%BA%E6%96%AD/</url>
    <content><![CDATA[<h1 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h1><h2 id="数据中台三阶段"><a href="#数据中台三阶段" class="headerlink" title="数据中台三阶段"></a>数据中台三阶段</h2><p>What（描述事实） -&gt; why（诊断归因：自动归因） -&gt; how（指导业务）</p>
<blockquote>
<p>arch问题本质都是耦合问题，都是balance问题</p>
<ol>
<li>业务数据化</li>
<li>数据资产化</li>
<li>资产服务化</li>
<li>服务可视化</li>
</ol>
</blockquote>
<a id="more"></a>
<h2 id="数据治理"><a href="#数据治理" class="headerlink" title="数据治理"></a>数据治理</h2><p>数据质量、数据元数据管理、数据生命周期、数据安全</p>
<h2 id="数据索引就是数据特征"><a href="#数据索引就是数据特征" class="headerlink" title="数据索引就是数据特征"></a>数据索引就是数据特征</h2><h2 id="九大思维模型"><a href="#九大思维模型" class="headerlink" title="九大思维模型"></a>九大思维模型</h2><ol>
<li>OLAP业务需求抽象分析至简思维模型</li>
<li>大数据架构设计本质思维模型：CAP、BASE</li>
<li>动态灵活组合大数据组件思维模型</li>
<li>根据场景平衡折中balance：适度超前：0.5-2年未来预期</li>
<li>个人影响力思维模型</li>
</ol>
]]></content>
      <tags>
        <tag>大数据</tag>
      </tags>
  </entry>
  <entry>
    <title>关于围棋这个RTS的一些想法</title>
    <url>/2020/03/09/%E5%85%B3%E4%BA%8E%E5%9B%B4%E6%A3%8B%E8%BF%99%E4%B8%AARTS%E7%9A%84%E4%B8%80%E4%BA%9B%E6%83%B3%E6%B3%95/</url>
    <content><![CDATA[<h2 id="关于围棋这个RTS"><a href="#关于围棋这个RTS" class="headerlink" title="关于围棋这个RTS"></a>关于围棋这个RTS</h2><p>我比较喜欢即时战略类游戏，最近开始研究围棋。</p>
<p>昨天感觉自己对围棋的理解成功从“数气”阶段，晋升到“走棋形”的阶段，在野狐上喜提12连胜，连升3级（12级。。。还是弱鸡）。</p>
<p>以我对围棋粗浅的理解，和扑克、war3做了一个比较，如下：</p>
<table>
<thead>
<tr>
<th></th>
<th>围棋</th>
<th>扑克</th>
<th>war3</th>
</tr>
</thead>
<tbody>
<tr>
<td>信息对称性</td>
<td><font color="red">对称</font></td>
<td><font color="gree">不对称</font></td>
<td><font color="gree">不对称</font></td>
</tr>
<tr>
<td>局面复杂性（玩家数）</td>
<td><font color="red">少</font></td>
<td><font color="yellow">中</font></td>
<td><font color="gree">多</font></td>
</tr>
<tr>
<td>[运气成分]出生是否均衡</td>
<td><font color="yellow">弱均衡（需要贴目）</font></td>
<td><font color="red">不均衡</font></td>
<td><font color="gree">均衡</font></td>
</tr>
<tr>
<td>战略意图</td>
<td><font color="gree">强</font></td>
<td><font color="red">弱</font></td>
<td><font color="yellow">中</font></td>
</tr>
</tbody>
</table>
<p>这么看来，war3游戏性更强是有道理了。</p>
<a id="more"></a>
<h2 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h2><p>实际上，游戏性是分了几个维度来衡量的：养成性、预判、代入感、新鲜感。</p>
<p>详情见<a href="https://www.gameres.com/850887.html" target="_blank" rel="noopener">https://www.gameres.com/850887.html</a></p>
<p>后面有了深入的体会再讨论。</p>
]]></content>
      <tags>
        <tag>心领神会</tag>
      </tags>
  </entry>
  <entry>
    <title>中国史纲</title>
    <url>/2023/01/05/%E4%B8%AD%E5%9B%BD%E5%8F%B2%E7%BA%B2/</url>
    <content><![CDATA[<p>中国史纲<br><a id="more"></a></p>
<p><img src="/images/中国史纲.JPG" alt></p>
]]></content>
      <tags>
        <tag>历史</tag>
      </tags>
  </entry>
  <entry>
    <title>关于时空数据的初步了解</title>
    <url>/2020/03/16/%E5%85%B3%E4%BA%8E%E6%97%B6%E7%A9%BA%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%9D%E6%AD%A5%E4%BA%86%E8%A7%A3/</url>
    <content><![CDATA[<h2 id="工具平台：GeoMesa-Hbase-spark"><a href="#工具平台：GeoMesa-Hbase-spark" class="headerlink" title="工具平台：GeoMesa+Hbase+spark"></a>工具平台：GeoMesa+Hbase+spark</h2><a id="more"></a>
<h2 id="时空数据的独特性"><a href="#时空数据的独特性" class="headerlink" title="时空数据的独特性"></a>时空数据的独特性</h2><h3 id="空间结构在现实生活中是分层的，且不同分层结构有不同目标和特点。"><a href="#空间结构在现实生活中是分层的，且不同分层结构有不同目标和特点。" class="headerlink" title="空间结构在现实生活中是分层的，且不同分层结构有不同目标和特点。"></a>空间结构在现实生活中是分层的，且不同分层结构有不同目标和特点。</h3><p>在时间和空间方面，它们都拥有专属的距离与空间层次。从距离上说，比如两个点之间的距离、两边之和大于第三边三角不等式以及地理学第一定律；从空间上说，包括一个城市、不同区域、不同街道、不同小区。处在不同的层次，它所代表的含义是不一样的，那么你在不同层次上的表达，对于运算的体现与帮助也是有差别的。</p>
<h3 id="时间属性：包括临近性、周期性以及趋势性三大块。"><a href="#时间属性：包括临近性、周期性以及趋势性三大块。" class="headerlink" title="时间属性：包括临近性、周期性以及趋势性三大块。"></a>时间属性：包括临近性、周期性以及趋势性三大块。</h3><h2 id="要关注的三个问题"><a href="#要关注的三个问题" class="headerlink" title="要关注的三个问题"></a>要关注的三个问题</h2><p>效率问题：开源<br>版权保护问题：数字水印<br>安全问题：联邦学习</p>
<h2 id="时空数据库设计时的独特性"><a href="#时空数据库设计时的独特性" class="headerlink" title="时空数据库设计时的独特性"></a>时空数据库设计时的独特性</h2><p>怎么将时空属性给 encode 进去？要利于保护时空数据的专有属性，否则 只把它当成一个数据来做的话，周期性、趋势性就会反映不出来，你的结果就不会十分准确。</p>
]]></content>
      <tags>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>2018 AI&amp;ML（自然语言识别、计算机视觉、强化学习）技术概览及2019技术趋势</title>
    <url>/2019/04/02/2018-AI-ML%EF%BC%88%E8%87%AA%E7%84%B6%E8%AF%AD%E8%A8%80%E8%AF%86%E5%88%AB%E3%80%81%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89%E3%80%81%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0%EF%BC%89%E6%8A%80%E6%9C%AF%E6%A6%82%E8%A7%88%E5%8F%8A2019%E6%8A%80%E6%9C%AF%E8%B6%8B%E5%8A%BF/</url>
    <content><![CDATA[<blockquote>
<p>一篇国外AI&amp;ML领域大咖的总结文章，翻译的时候我是奔着“信达雅”去的，结果脸着地还没接住，翻译的水平有限，有兴趣的也可以看<a href="https://www.analyticsvidhya.com/blog/2018/12/key-breakthroughs-ai-ml-2018-trends-2019/" target="_blank" rel="noopener">原文</a></p>
</blockquote>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近几年，人工智能的热度和机器学习技术的成熟度有了一个梦幻般的增长。这些技术已经从边缘领域发展成为了技术主流，并且已经现如今已经影响了数以百万计的人。各个国家也增加了在AI领域的投入以使自己保持竞争优势。</p>
<p>对于数据科学专家来说情况也是一样的， 在过去几年，即使只懂一点相关工具和技术你就可以高枕无忧了。但是现在已经完全不行了。在这个领域发生了太多事情，且有太多东西需要学习以保持和业界同步，这有时令人难以置信。</p>
<p>这就是我为什么想以一个数据科学从业者的视角，回顾一下在几个关键领域里人工智能领域里都取得了哪些发展？哪些突破？2018发生了些什么？2019又有哪些期待？</p>
<h2 id="我们将会在文中提到的领域"><a href="#我们将会在文中提到的领域" class="headerlink" title="我们将会在文中提到的领域"></a>我们将会在文中提到的领域</h2><ul>
<li>自然语言处理</li>
<li>计算机视觉</li>
<li>工具和库</li>
<li>强化学习</li>
<li>AI伦理</li>
</ul>
<a id="more"></a>
<h2 id="自然语言处理NLP"><a href="#自然语言处理NLP" class="headerlink" title="自然语言处理NLP"></a>自然语言处理NLP</h2><p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/11/asset-v1AnalyticsVidhyaNLP1012018_T1type%40assetblock%40nlp2.jpg" alt></p>
<p>让机器理解单词和句子在之前一直是一个梦，即使是人类自己在面对语言巨量的细节时，有时也会显得手足无措。但是2018年绝对是NLP的转折年。</p>
<p>我们已经看到一个接一个的技术突破—— ULMFiT, ELMO, OpenAI的 Transformer 以及 Google的BERT 等等。迁移学习在NLP任务上的成功应用打开了一扇通往无限可能的大门。Sebastian Ruder 的播客让我们相信在他的这个领域里有了多么长足的发展。</p>
<p>现在我们来更细致地看一下这些关键的进展吧。如果你希望在NLP领域里找学习的切入点，或者正在找相关的库，请先确保你已经学习过<a href="https://trainings.analyticsvidhya.com/courses/course-v1:AnalyticsVidhya+NLP101+2018_T1/about" target="_blank" rel="noopener">NLP using Python</a>的课程了。这是一个开始NLP学习的好地方。</p>
<h3 id="ULMFiT"><a href="#ULMFiT" class="headerlink" title="ULMFiT"></a>ULMFiT</h3><p>由Sebastian Ruder 和 fast.ai的 Jeremy Howard共同设计的ULMFiT是让迁移学习成为热点的首个框架。对于没有多少经验的人来说，它代表了“通用语言模型”，Jeremy和Sebastian在这个框架中真正实现了通用二字的含义，它几乎可以应用于所有NLP任务。</p>
<p>不需要更多的ULMFiT或其它的框架介绍了，因为你根本不需要从头开始训练模型！这些研究人员已经做好了最困难的部分。你只需要在你的项目中，学会并应用他们的研究成果即可。ULMFiT在六个文本分类任务里表现优于其他最先进的方法。</p>
<p>关于如何使用此框架解决文本分类问题，你可以阅读由Prateek写的这个很棒的<a href="https://www.analyticsvidhya.com/blog/2018/11/tutorial-text-classification-ulmfit-fastai-library/" target="_blank" rel="noopener">教程</a>。</p>
<h3 id="ELMo"><a href="#ELMo" class="headerlink" title="ELMo"></a>ELMo</h3><p>ELMo是Embeddings from Language Models的简写，即使不提它奇怪的名字，ELMo在发布后依然能迅速获得机器学习社区的关注。</p>
<p>ELMo在考虑了单词在句子和段落中的上下文之后，使用了各种模型去获知单词的内在含义(embeddings)。语境是一个很重要，同时又大部分人都没有掌握的NLP的组成部分。ELMo使用了双向的LSTMs去理解单词内含(embeddings)。你可以阅读<a href="https://www.analyticsvidhya.com/blog/2017/12/fundamentals-of-deep-learning-introduction-to-lstm/" target="_blank" rel="noopener">这篇文章</a>去快速了解LSTMs的工作原理。</p>
<p>就像ULMFiT一样，ELMo显著地提高了各种类型NLP任务的计算性能，比如情绪分析和问答分析。可以阅读<a href="https://allennlp.org/elmo" target="_blank" rel="noopener">这篇文章</a>了解更多。</p>
<h3 id="BERT"><a href="#BERT" class="headerlink" title="BERT"></a>BERT</h3><p>不少专家认为BERT的发布开启了NLP的新纪元。继ULMFiT 和 ELMo之后，BERT在性能表现上碾压了对手。正如<a href="https://arxiv.org/abs/1810.04805" target="_blank" rel="noopener">原始论文</a>里说的“BERT是概念极简且经验强大的(BERT is conceptually simple and empirically powerful)”。</p>
<p>BERT在11项NLP任务中获得了最优的结果，可以看一下他们在SQuAD基准测试中的表现：</p>
<table>
<thead>
<tr>
<th>SQuAD v1.1 Leaderboard (Oct 8th 2018)</th>
<th>Test EM</th>
<th>Test F1</th>
</tr>
</thead>
<tbody>
<tr>
<td>1st Place Ensemble – BERT</td>
<td>87.4</td>
<td>93.2</td>
</tr>
<tr>
<td>2nd Place Ensemble – nlnet</td>
<td>86.0</td>
<td>91.7</td>
</tr>
<tr>
<td>1st Place Single Model – BERT</td>
<td>85.1</td>
<td>91.8</td>
</tr>
<tr>
<td>2nd Place Single Model – nlnet</td>
<td>83.5</td>
<td>90.1</td>
</tr>
</tbody>
</table>
<p>你可以在自己的机器上使用<a href="https://github.com/huggingface/pytorch-pretrained-BERT" target="_blank" rel="noopener">PyTorch的实现</a>或者Google的<a href="https://github.com/google-research/bert" target="_blank" rel="noopener">Tensorflow实现</a>去验证这个结果。</p>
<p>我非常肯定你会好奇BERT在这一点上代表了什么。它是翻译机的双向编码表示(Bidirectional Encoder Representations from Transformers)。如果第一次能做对，就会是满分。</p>
<h3 id="Facebook-PyText"><a href="#Facebook-PyText" class="headerlink" title="Facebook PyText"></a>Facebook PyText</h3><p>Facebook怎么会离开赛道呢？他们已经开源了自己的深度学习NLP框架，叫PyText。它在本周初早些时候刚刚发布，所以我还在实验当中，但是从早期的评论来看，是非常有潜力的。根据Facebook发表的研究，PyText使对话模型的准确率提升了10%的同时降低了训练时间。</p>
<p>PyText实际上还是弱于Facebook其它产品的，比如FB Messenger。因此，使用这个框架可以为你的工作(your own portfolio)添加现实世界的价值(除了您将获得的宝贵知识以外)。</p>
<p>你可以在他们的<a href="https://github.com/facebookresearch/pytext" target="_blank" rel="noopener">GitHub repo</a>里下载源码。</p>
<h3 id="Google-Duplex"><a href="#Google-Duplex" class="headerlink" title="Google Duplex"></a>Google Duplex</h3><p>如果你还没有听说过Google Duplex，那你可能out了。Sundar Pichai 用这个demo震撼了当时在场的观众，并且从那以为它就一直是新闻的头条了。</p>
<iframe width="420" height="315" src="https://www.youtube.com/embed/NO0-5MuJvew" frameborder="0" allowfullscreen></iframe>


<p>因为这是一个Google的产品，所以他们很可能会在未来将其开源。这的确是一个非常棒的音频处理应用。当然它也带来了道德和隐私问题，但那是本文后面才要说的了。现在，还是让我们感慨一下这些年我们已经和机器学习走了多远吧。</p>
<h3 id="2019年NLP值得期待的事"><a href="#2019年NLP值得期待的事" class="headerlink" title="2019年NLP值得期待的事"></a>2019年NLP值得期待的事</h3><p>还有谁比 Sebastian Ruder 他自己更能预测NLP在2019年的发展呢，他的想法如下：</p>
<blockquote>
<p>预训练语言模型内含(embeddings)将会变得普遍。不使用此类方法，将很难得到最优的模型。<br>我们将看到预训练的表示( pretrained representations)可以给语言模型内含提供补充的专业信息。我们将可以根据任务的需求组合不同类型的预训练的表示.<br>我们将可以看到会在多语言应用和跨语言模型上会有更多的进展。尤其在跨语言单词内含的基础上，我们将会看到深入的预训练跨语言表示。</p>
</blockquote>
<h2 id="计算机视觉"><a href="#计算机视觉" class="headerlink" title="计算机视觉"></a>计算机视觉</h2><p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/12/CV.jpg" alt></p>
<p>这是现在深度学习领域中最受欢迎的领域了。我认为现在已经渡过了计算机视觉的初期，进入了精炼化的阶段。无论是图像还是视频，我们都已经看到了太多可以轻而易举完成计算机视觉任务的框架。</p>
<p>在 Analytics Vidhya，我们已经用了很多时间去普及这些概念。你可以从<a href="https://www.analyticsvidhya.com/blog/category/deep-learning/" target="_blank" rel="noopener">这里</a>看到我们关于计算机视觉的文章，主题涵盖了从“在图像和视频中完成物体识别”到“预训练模型列表”，这些资料可以帮助你开始你的深度学习旅程。</p>
<p>以下是我精心挑选的计算机视觉的优秀项目。</p>
<p>如果你对这个领域很好奇（实际上这可能是未来工业界最火的工作之一），那么可以通过学习我们的<a href="https://trainings.analyticsvidhya.com/courses/course-v1:AnalyticsVidhya+CVDL101+CVDL101_T1/about" target="_blank" rel="noopener">深度学习和计算机视觉</a>课程。</p>
<h3 id="BigGANs"><a href="#BigGANs" class="headerlink" title="BigGANs"></a>BigGANs</h3><p>Ian Goodfellow在2014年设计了GANs（生成对抗网络）概念，并在随后的时间里这一概念衍生出了很多多样化的应用。每年我们都可以看到这个原始的概念通过调整适应了很多实际的案例。但是有一件事从今年开始发生——机器生成的图像非常好辨认出来。框架里总是会有一些不一致性会导致区别非常明显。</p>
<p>但是最近几个月，这一边界已经开始变得模糊。随着<a href="https://arxiv.org/pdf/1809.11096.pdf" target="_blank" rel="noopener">BigGANs</a>的建立，这一边界有可能被彻底消除。看看下面机器生成的图片，你几乎无法看出这些图片有什么问题。<br><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/12/Screenshot-from-2018-12-18-18-06-19.png" alt><br>无论是忧虑还是兴奋，我们不得不承认GANs正在重塑我们对数字图像（视频）的认知。</p>
<p>对于一些数据科学家来说，这些模型首先在ImageNet上训练，然后是JFT-300M，以展示它们可以很好的从一个数据集迁移到另一个数据集。我同样会引导你到一个可视化理解的GAN的<a href="https://gandissect.csail.mit.edu/" target="_blank" rel="noopener">学习页</a>。</p>
<h3 id="Fast-ai可以在18分钟内完成在-ImageNet上的训练"><a href="#Fast-ai可以在18分钟内完成在-ImageNet上的训练" class="headerlink" title="Fast.ai可以在18分钟内完成在 ImageNet上的训练"></a>Fast.ai可以在18分钟内完成在 ImageNet上的训练</h3><p>这是一个非常大的进展。 我们通常认为要想获得一个合适的深度学习任务，往往需要大量的数据以及繁重的计算任务。这里包括了在ImageNet上从头开始的训练。我可以肯定我们所有人都是这么认为的，而Fast.ai的人找到了这么快的办法证明我们其实想错了。</p>
<p>他们用18分钟训练出的模型可以达到93%的准确率。而他们在<a href="http://www.fast.ai/2018/08/10/fastai-diu-imagenet/" target="_blank" rel="noopener">blog</a>中提到他们用的硬件，仅是16台包涵了8个 NVIDIA V100 GPU的AWS公开实例。他们是使用Fastai和PyTorch库构建的此算法。</p>
<p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/08/v2-718f95df083b2d715ee29b018d9eb5c2_r.jpg" alt></p>
<p>所有这些加在一起的成本仅有40美元！<a href="http://www.fast.ai/2018/08/10/fastai-diu-imagenet/" target="_blank" rel="noopener">这里</a>有Jeremy关于这项技术更详细的说明。这是所有人的胜利！</p>
<h3 id="NVIDIA的-vid2vid-技术"><a href="#NVIDIA的-vid2vid-技术" class="headerlink" title="NVIDIA的 vid2vid 技术"></a>NVIDIA的 vid2vid 技术</h3><p>图像处理在最近4、5年有了巨大的飞跃，但是视频呢？事实证明，从单帧到多帧的方法迁移比大多数人想像的还要难一些。你能拿着一个视频的时间序列数据去预测下一帧是什么内容吗？之前有过一些探索，但是最好的结论也都并不明确。</p>
<p>NVIDIA在今年早些时候开源了他们的方案，并获得了广泛的赞誉。他们的vid2vid技术的目标是学习一个从输入视频到输出视频的映射函数，而输出视频可以以令人难以置信的准确度延续了输入视频的内容。</p>
<p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/08/v2V1.png" alt></p>
<p>你可以从<a href="https://github.com/NVIDIA/vid2vid" target="_blank" rel="noopener">他们的Github</a>上看到他们的PyTorch的实现。</p>
<h3 id="2019年计算机视觉领域展望"><a href="#2019年计算机视觉领域展望" class="headerlink" title="2019年计算机视觉领域展望"></a>2019年计算机视觉领域展望</h3><p>正如我之前提到的，我们在2019年应该只会看到一些改进，但不会是大的发明。自动驾驶、人脸识别和虚拟现实貌似都没有什么太多的变化。你可以随便质疑我此处的观点，并加上你的观点，我非常想知道还有什么是我们现在还没看到，但是还值得期待的。</p>
<p>即使有政治因素的干预和政府的许可限制，无人机最终会在美国获得批准（印度还远远不能）。个人角度上说，我希望有更多的研究成果可以在真实场景里实施出来。像CVPR和ICML这些会议已经代表了最新进展，但是他们的成果离现实应用又有多远的距离啊？</p>
<p>视觉问题解答和视觉对话系统最终可能很快完成他们让人期待以久的首次亮相。这些系统缺少泛化能力，但是值得期待的是，我们将会很快看到一些多模型整合的方案。</p>
<p>有监督学习是今年的主角。我可以打赌在明年它将被用在更多的研究之中。有一个非常棒的学习思路——让我们的输入数据直接决定标签，而不是浪费很多时间手工标注。让我们祈祷吧。</p>
<h2 id="工具和类库"><a href="#工具和类库" class="headerlink" title="工具和类库"></a>工具和类库</h2><p>本节将会吸引很多数据科学家的注意，因为工具和类库是数据科学家的工作基础。我参与了大量关于哪个工具最好，哪个框架取代了哪个框架，哪个类库是金融计算的代表之类的争论。我相信这些问题有很多也与你的工作相关。</p>
<p>但是有一点我们得承认：我们需要保持对这个领域里最新工具的跟进，否则就会埋下更多的风险。Python极速取代一切并成为行业领导者的故事就是一个充分的例子。虽然很多问题的答案可能是一些主观的选择（比如你们公司用什么工具，你们从现有框架迁移到新框架的可行性决策等），但是如果你现在还没有在考虑最优解决方案，我劝你现在就开始吧。</p>
<p>所以到底明年谁会是头条呢？让我们拭目以待吧。</p>
<h3 id="PyTorch-1-0"><a href="#PyTorch-1-0" class="headerlink" title="PyTorch 1.0"></a>PyTorch 1.0</h3><p>PyTorch炒作得太厉害了，我在本文已经提到了很多次，我会让我的同事 Faizan Shaikh去<a href="https://www.analyticsvidhya.com/blog/2018/02/pytorch-tutorial/" target="_blank" rel="noopener">介绍这个框架的细节</a>。</p>
<p>这是我非常欣赏的必读文章之一，因为有时候TensorFlow运行会很慢，所以给PyTorch了一个迅速抢占市场的机会，PyTorch流行起来的速度比TensorFlow快了一倍。我看到的大部分开源代码都是对PyTorch概念的实现。这绝非巧合，PyTorch非常灵活，并且它的最新版本已经大规模的增强了Facebook的产品和服务，其中包括每天60亿次的文本翻译工作。</p>
<p>PyTorch的2019年的采用率正在增长，所以对于任何人来说，现在就是上车的好时候。</p>
<h3 id="AutoML"><a href="#AutoML" class="headerlink" title="AutoML"></a>AutoML</h3><p>自动化机器学习技术在过去几年中取得了很大的进展。一些像RapidMiner, KNIME, DataRobot and H2O.ai这样的公司，凭借着他们出色的产品展示了这项服务巨大的潜力。</p>
<p>你能想像只需要拖拽，而不需要编码就能完成机器学习和深度学习的任务吗？这个场景在未来已经不难实现了。除了这些公司的产品外，机器学习领域还有一个重大的产品发布——Auto Keras！</p>
<p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/08/auto-keras.png" alt></p>
<p>它是一个可以执行AutoML任务的开源库，这个项目的初衷是让不懂机器学习的领域专家们也可以使用深度学习技术。你可以在<a href="https://autokeras.com/" target="_blank" rel="noopener">这里</a>看到这个项目，未来几年它将蓄势待发。</p>
<h3 id="TensorFlow-js——浏览器里的深度学习"><a href="#TensorFlow-js——浏览器里的深度学习" class="headerlink" title="TensorFlow.js——浏览器里的深度学习"></a>TensorFlow.js——浏览器里的深度学习</h3><p>我们已经在IDE和Notebook里设计构建了很多机器学习的模型。为什么不向外走一步，去尝试一些新的技术呢？没错，我们可以在我们的浏览器里的去运行深度学习模型了！<br><img src="https://js.tensorflow.org/images/TF_JS_lockup.png" alt></p>
<p>这要感谢<a href="https://js.tensorflow.org/" target="_blank" rel="noopener">TensorFlow.js项目</a>，它有一些demo，充分展示了这个想法有多酷。以下是TensorFlow.js的三个主要特点：</p>
<p>用JavaScript开发和部署机器学习模型<br>在浏览器里运行已经存在的TensorFlow模型<br>重训练已经存在的TensorFlow模型</p>
<h3 id="2019年AutoML展望"><a href="#2019年AutoML展望" class="headerlink" title="2019年AutoML展望"></a>2019年AutoML展望</h3><p>我想在本章中只强调AutoML技术。因为我认为这项技术才是未来数据科学领域里的游戏规则改变者。不要只是听我说，让我们来看看H2O.ai的 <a href="https://soundcloud.com/datahack-radio/episode-3-marios-michailidis" target="_blank" rel="noopener">Marios Michailidis</a>和 Kaggle Grandmaste是怎么看待2019AutoML的：</p>
<blockquote>
<p>机器学习在成为未来重要趋势的道路上一路高歌猛进。这一扩展增加了对这一领域熟练应用的需求。鉴于它的成长，自动化是把数据科学资源最优化利用的关键。这一技术的应用范围无限宽广：信用，保险，欺诈，计算机视觉，声学，传感器，推荐器，预测，NLP，你来定义它。在这个领域里工作是一种荣幸。这个重要的趋势可以这么理解：</p>
</blockquote>
<ol>
<li>为辅助描述和理解数据，提供智能化的可视化操作界面</li>
<li>在给定的数据集上寻找、构建、抽象更好的特征</li>
<li>快速建立强大的有预见能力的模型</li>
<li>通过机器学习，给黑盒模型和生产模型提供可解释性</li>
<li>促进这些模型的产生</li>
</ol>
<h2 id="强化学习"><a href="#强化学习" class="headerlink" title="强化学习"></a>强化学习</h2><p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/11/RL.png" alt></p>
<p>如果让我选一个希望看到更多进展的领域，我想会是强化学习。除了偶尔能看到不定期的头条新闻之外，还没有发现有什么颠覆性的突破。社区里，大家普遍认为它太重数学，没有可以使用的真正可工业化的应用。</p>
<p>虽然这在某种程度上可能是正确的，但是我仍然希望在明年看到更多关于强化学习的使用案例。在我每个月发布的GitHub和Reddit系列里，我倾向于至少保留有一个git仓库或相关讨论。在所有研究方向里，这里可能会诞生下一个重大突破。</p>
<p>OpenAI已经发布了一个非常有用的工具包，可以帮助初学者了解这个领域，你也可以看看这篇<a href="https://www.analyticsvidhya.com/blog/2017/01/introduction-to-reinforcement-learning-implementation/" target="_blank" rel="noopener">对初学者非常友好的文章</a>（对我真的非常有帮助）。</p>
<h3 id="OpenAI在深度强化学习的应用"><a href="#OpenAI在深度强化学习的应用" class="headerlink" title="OpenAI在深度强化学习的应用"></a>OpenAI在深度强化学习的应用</h3><p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/12/spinning-up-in-rl-768x461.png" alt></p>
<p>如果说强化学习的研究进展缓慢，那么相关的教育材料就可以说是非常少了。但是就像OpenAI说的那样，他们已经开源了关于这个主题的一些非常棒的材料。他们管这个项目叫“Spinning Up in Deep RL”，你可以从<a href="https://spinningup.openai.com/en/latest/" target="_blank" rel="noopener">这里</a>了解到它们。</p>
<p>它是一个非常全面的关于强化学习的资源列表，他们让代码和名词解释保持尽可能简单。它里面包含很多有用的材料，比如强化学习的术语，如何成长为强化学习研究员的建议，一个重要论文的列表，一个拥有非常好文档的代码仓库，甚至还有一些帮助你入门的练习。</p>
<p>不要再拖延，如果你计划入门强化学习，现在就开始吧。</p>
<h3 id="Google开源的Dopamine"><a href="#Google开源的Dopamine" class="headerlink" title="Google开源的Dopamine"></a>Google开源的Dopamine</h3><p>为了加速强化学习的研究进度，同时让社区更多的参与到这个方向中来，Google AI团队开源了Dopamine，它是一个Tensorflow的框架，旨在更灵活和可重复性的创建实验。</p>
<p><img src="https://s3-ap-south-1.amazonaws.com/av-blog-media/wp-content/uploads/2018/08/goog.png" alt><br></p>
<p>在<a href="https://github.com/google/dopamine" target="_blank" rel="noopener">这里</a>，你可以找到一个完整的训练数据以及TensorFlow的代码。在受控且灵活的环境下进行简单的实验，它应该是一个完美的选择了。在数据科学家看来，这些听起来就像梦一样。</p>
<h3 id="2019强化学习预期的发展趋势"><a href="#2019强化学习预期的发展趋势" class="headerlink" title="2019强化学习预期的发展趋势"></a>2019强化学习预期的发展趋势</h3><p>Xander Steenbrugge，作为2018 DataHack大会的演讲者和ArxivInsights频道的创建者，应该说已经是强化学习领域里的专家了。以下是他对强化学习在2019年的预期：</p>
<p>我现在在这信领域能看到三个主要的问题：</p>
<blockquote>
</blockquote>
<ul>
<li>样本复杂：为了学习，代理需要大量的数据经验</li>
<li>泛化和迁移学习：在任务A上训练，在相关的任务B上测试</li>
<li>分层的强化学习：自动化子目标分解</li>
</ul>
<h2 id="AI-for-Good——通往AI伦理"><a href="#AI-for-Good——通往AI伦理" class="headerlink" title="AI for Good——通往AI伦理"></a>AI for Good——通往AI伦理</h2><p>想像一个由算法控制人类行为的世界吧，这并不仅仅是一个乐观的设想对吧？AI的道德伦理一直是Analytics Vidhya非常热衷讨论问题。在所有的技术讨论中，它会让其它讨论陷入困境。</p>
<p>一小部分公司今年因为身陷Facebook和Google内部充斥着的设计武器的丑闻而颜面扫地。但是这一切促使大公司开始制定规章和指导方针。</p>
<p>关于AI的伦理问题，并不存在一个一劳永逸或者开箱即用的解决方案。它的解决，需要结合细致入微的方案和由领导层给出的结构化的路径共同作用。让我们看一些今年早些时候对这一问题取得突破的举措。</p>
<h3 id="Google和Microsoft之间的战争"><a href="#Google和Microsoft之间的战争" class="headerlink" title="Google和Microsoft之间的战争"></a>Google和Microsoft之间的战争</h3><p>看到大公司把重点放在AI的这个方面是令人振奋的。可以看看这两家公司发布的AI原则：</p>
<ul>
<li><a href="https://www.blog.google/technology/ai/ai-principles/" target="_blank" rel="noopener">Google的AI原则</a></li>
<li><a href="https://www.microsoft.com/en-us/ai/our-approach-to-ai" target="_blank" rel="noopener">Microsoft的AI原则</a></li>
</ul>
<p>这些都基本上谈到了AI的公平性以及什么时候在什么地方划清界线。在你开始一个AI工程之前，参考这些原则会是一个好的建议。</p>
<h3 id="GDPR对局面有什么影响"><a href="#GDPR对局面有什么影响" class="headerlink" title="GDPR对局面有什么影响"></a>GDPR对局面有什么影响</h3><p>GDPR法律法规对那些收集用户信息去构建AI应用的公司有很大的影响。GDPR给了用户更多的权利去控制自己的数据。</p>
<p>所以这个政策对AI有什么影响呢？如果没有数据，构建任何模型就都没有了基础。这无疑给社交平台和其它网站提供了工具。GDPR正在进行一个非常引人注目的相关研究，但是现在来看，它限制了AI在很多平台的实用性。</p>
<h3 id="2019AI伦理展望"><a href="#2019AI伦理展望" class="headerlink" title="2019AI伦理展望"></a>2019AI伦理展望</h3><p>这其实是一个灰色地带。目前没有一个可行的方案去解决它。我们需要一起协作，努力把伦理注入到AI的项目中去。我们该怎么实现这一点呢？就像Analytics Vidhya的CEO Kunal Jain说的那样，我们会制定一个讨论框架，大家可以基于它去讨论这个问题。</p>
<p>我期望看到在组织中加入更多的规则去处理AI伦理的问题。随着AI成为公司的愿景，公司的最佳实践需要重构，组织方式也需要重建。我还希望政府发挥更加积极的作用，制定新的或修改原有的政策。2019将是非常有趣的一年。</p>
<h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>强而有力——这是我对2018年那些令人惊叹的发展的最简洁的表达。今年我是ULMFiT的热心用户，同时我将尽快去探索一下BERT，这将是令人兴奋的时光。</p>
<p>我也非常想听到你的声音，有哪些发展你认为是最重要的？你正在使用文章中提到的工具去工作吗？你对接下来的一年有什么预期？我很期望在留言区看到你的回复。</p>
]]></content>
      <categories>
        <category>技术趋势</category>
      </categories>
      <tags>
        <tag>AI</tag>
      </tags>
  </entry>
  <entry>
    <title>关于开源商业模式的思考</title>
    <url>/2021/07/12/%E5%85%B3%E4%BA%8E%E5%BC%80%E6%BA%90%E5%95%86%E4%B8%9A%E6%A8%A1%E5%BC%8F%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h2 id="核心竞争力"><a href="#核心竞争力" class="headerlink" title="核心竞争力"></a>核心竞争力</h2><blockquote>
<p>随着付费意愿的增强，核心竞争力不应该是靠把技术藏起来实现的，而应该是靠专业的服务真正给客户降本增效<br>技术不是护城河，产品也不是，生态（社区生态、用户生态、云生态）以及生态的运营能力才是</p>
</blockquote>
<a id="more"></a>
<h2 id="技术世界里不变的事"><a href="#技术世界里不变的事" class="headerlink" title="技术世界里不变的事"></a>技术世界里不变的事</h2><ol>
<li>分布式是必选项</li>
<li>Cloud native，cloud是前提假设，而不仅仅是把应用搬到云上而已（snowflake）</li>
<li>开源：堆积木式的开发</li>
</ol>
<h2 id="不是技术在变，是应用场景在变（变化都是场景引发的，而非技术本身）"><a href="#不是技术在变，是应用场景在变（变化都是场景引发的，而非技术本身）" class="headerlink" title="不是技术在变，是应用场景在变（变化都是场景引发的，而非技术本身）"></a>不是技术在变，是应用场景在变（变化都是场景引发的，而非技术本身）</h2><p>结构化-&gt; 非结构化-&gt;物联网</p>
<h2 id="开源商业模式的好处"><a href="#开源商业模式的好处" class="headerlink" title="开源商业模式的好处"></a>开源商业模式的好处</h2><ol>
<li>对自己：<ol>
<li>走出去：提升知名度</li>
<li>引进来：收集反馈、优化和迭代的提速</li>
</ol>
</li>
<li>对用户：<ol>
<li>解决创业公司的信任危机</li>
</ol>
</li>
</ol>
<h2 id="一些事实"><a href="#一些事实" class="headerlink" title="一些事实"></a>一些事实</h2><p><strong>优秀的工程师是少数的，且分散的</strong>，所以开源才是联结这些人，并撬动这些人的好方式。<br>只有中国人才有国际化的问题，且国际化在当地都对应的是本土化</p>
]]></content>
      <tags>
        <tag>开源</tag>
        <tag>商业模式</tag>
      </tags>
  </entry>
  <entry>
    <title>关于画各种流程图、架构图的核心观点</title>
    <url>/2020/12/23/%E5%85%B3%E4%BA%8E%E7%94%BB%E5%90%84%E7%A7%8D%E6%B5%81%E7%A8%8B%E5%9B%BE%E3%80%81%E6%9E%B6%E6%9E%84%E5%9B%BE%E7%9A%84%E6%A0%B8%E5%BF%83%E8%A7%82%E7%82%B9/</url>
    <content><![CDATA[<h3 id="一张图只有一个重点，和重点无关的部分都做淡化处理。"><a href="#一张图只有一个重点，和重点无关的部分都做淡化处理。" class="headerlink" title="一张图只有一个重点，和重点无关的部分都做淡化处理。"></a>一张图只有一个重点，和重点无关的部分都做淡化处理。</h3><blockquote>
<p>目的：把听众目光牵引到关键点上去，节省听众认知资源</p>
</blockquote>
<h3 id="一张图只阐释一个观点，不能是多个，职责要单一。"><a href="#一张图只阐释一个观点，不能是多个，职责要单一。" class="headerlink" title="一张图只阐释一个观点，不能是多个，职责要单一。"></a>一张图只阐释一个观点，不能是多个，职责要单一。</h3><blockquote>
<p>目的：图是为了表达观点而生的，观点要一个一个说，图要一个一个展示，节省听众认知资源</p>
</blockquote>
<h3 id="不是为了画图而画图，而是因为图的颜色和结构能帮助表达观点所以才画。比如：用阶梯图协助表达递进关系，这样文字就不用表达递进关系了"><a href="#不是为了画图而画图，而是因为图的颜色和结构能帮助表达观点所以才画。比如：用阶梯图协助表达递进关系，这样文字就不用表达递进关系了" class="headerlink" title="不是为了画图而画图，而是因为图的颜色和结构能帮助表达观点所以才画。比如：用阶梯图协助表达递进关系，这样文字就不用表达递进关系了"></a>不是为了画图而画图，而是因为图的颜色和结构能帮助表达观点所以才画。比如：用阶梯图协助表达递进关系，这样文字就不用表达递进关系了</h3><blockquote>
<p>目的：用颜色和结构等可视化元素刺激听众，而不是靠文字和讲述，节省听众认知资源</p>
</blockquote>
]]></content>
      <tags>
        <tag>画图</tag>
        <tag>方法论</tag>
      </tags>
  </entry>
  <entry>
    <title>什么才是好的金句！</title>
    <url>/2023/01/05/%E4%BB%80%E4%B9%88%E6%89%8D%E6%98%AF%E5%A5%BD%E7%9A%84%E9%87%91%E5%8F%A5%EF%BC%81/</url>
    <content><![CDATA[<blockquote>
<p>金句选取标准：有新知的事实、有趣味的事实。</p>
</blockquote>
<a id="more"></a>
<p>必须有事实。</p>
<p>所谓新知：<br>1，能给出重要启发、经验或规律的。——从未知到已知<br>2，之前大家漠视、之后必须重视的——从次要到重要<br>3，颠覆大众直觉，让人恍然大悟，回归常识的——从谬误到真相<br>4，能提炼出特别简单实用的方法论的——化复杂为简单</p>
<p>所谓趣味<br>能成为知识精英饭局上的趣味谈资</p>
<p>关于金句的第一步修正思考</p>
<p>1，金句写作要有“代入”的过程。<br>人接收信息的规律如下：<br>由简单到复杂<br>由熟悉到陌生<br>由提问到回答<br>由事实到理论<br>所以，好的金句是先从用户熟悉、简单、有趣、有悬疑的事实进入，落脚到有启发性的理论上。</p>
<p>原金句——<br>商业最终都是为了交易，而交易是通过支付实现的，因此透过支付更容易看清商业的本质。当支付围绕各个不同行业时，把行业的各个环节串起来就更是如此。所以从支付公司出来的人往往更容易在商战中胜出。</p>
<p>修改为——<br>为什么从支付公司出来的人往往更容易在商战中胜出？（意外的事实）因为商业最终都是为了交易，而交易是通过支付实现的，因此透过支付更容易看清商业的本质（抽象理论）。</p>
<p>原金句——<br>嫉妒之所以复杂，在于它跟恨一样，与爱有极为密切的关系；唯有我们的爱，才会激起我们最强烈的恨。在谋杀案中，家庭犯罪占了极大比例绝不令人惊讶，因为谋害者与受害者之间的感情纠葛往往最深。（评价：1，应把最反直觉的事实前置、理论后置。2，嫉妒是与主题不想关的信息，应去掉。）</p>
<p>修改为——<br>和一般人的直觉不同，在谋杀案中，家庭犯罪占了极大比例。因为谋害者与受害者之间的感情纠葛往往最深。唯有我们的爱，才会激起我们最强烈的恨。</p>
<p>原金句——<br>要确保自己的人脉“真正的”广泛，就不要把自己的信息源固定在和自己一个级别、甚至以上的人们。招聘情报员的时候，来自富裕家庭的高官，远不如一个在收发室的邮务员更合适——他们都能接触敏感的文字资料。同样的，商业间谍活动也常从基层开始打探。</p>
<p>修改为——<br>招聘情报员的时候，来自富裕家庭的高官，远不如一个在收发室的邮务员更合适——虽然他们都能接触敏感的文字资料（意外的事实、悬疑），但要确保人脉“真正的”广泛，就不要把自己的信息源固定在和自己一个级别的人们（抽象理论）。这就是为什么，商业间谍活动常从基层开始打探（应用）。</p>
<p>2，以下内容不是我们选取的，比如：<br>纯鸡汤<br>你的时间有限，所以不要为别人而活。不要被教条所限，不要活在别人的观念里。不要让别人的意见左右自己内心的声音。最重要的是，勇敢地去追随自己的心灵和直觉，只有自己的心灵和直觉才知道你自己的真实想法，其它一切都是次要。——乔布斯</p>
<p>纯理论<br>人性的弱点在于习惯于学习精确的东西而不善于总体把握。我们不学习规律而学习事实，进而蔑视抽象的东西。因此，我们常常缺乏基本的思考能力，以至于当突发事件出现后，我们只看到它的不可预测性而忽略了它的可预测性。</p>
<p>只有事实，没有和用户相关的理论落点<br>宋代实行的是均税制，已非均田政策。王安石为使民间不必当差，推行免疫法，可由大众缴钱分担经费。此举遭到了保守派的反对。实际上王安石的新政更适合南方那种小地主的生产方式，对北方大户往往不适合。所以王安石推行的方田制和免疫法，在实际操作中没有成功。</p>
]]></content>
  </entry>
  <entry>
    <title>关于股票和股市</title>
    <url>/2020/10/26/%E5%85%B3%E4%BA%8E%E8%82%A1%E7%A5%A8%E5%92%8C%E8%82%A1%E5%B8%82/</url>
    <content><![CDATA[<p>待展开</p>
<h2 id="股票是上市公司的所有权"><a href="#股票是上市公司的所有权" class="headerlink" title="股票是上市公司的所有权"></a>股票是上市公司的所有权</h2><h2 id="股市是检验自身认知水平的好工具"><a href="#股市是检验自身认知水平的好工具" class="headerlink" title="股市是检验自身认知水平的好工具"></a>股市是检验自身认知水平的好工具</h2><h2 id="会买的是徒弟，会卖的是师傅"><a href="#会买的是徒弟，会卖的是师傅" class="headerlink" title="会买的是徒弟，会卖的是师傅"></a>会买的是徒弟，会卖的是师傅</h2><h2 id="卖股票时机："><a href="#卖股票时机：" class="headerlink" title="卖股票时机："></a>卖股票时机：</h2><ol>
<li>急用钱</li>
<li>公司自身已经没有发展的动力</li>
<li>有更好的公司投资机会</li>
</ol>
]]></content>
      <tags>
        <tag>经济金融</tag>
      </tags>
  </entry>
  <entry>
    <title>在线服务设计方法论</title>
    <url>/2020/05/12/%E5%9C%A8%E7%BA%BF%E6%9C%8D%E5%8A%A1%E8%AE%BE%E8%AE%A1%E6%96%B9%E6%B3%95%E8%AE%BA/</url>
    <content><![CDATA[<p>工作多年，期间既做过要求强一致的系统，也做过要求低延时、高吞吐的系统，还搞过微服务的拆分和管理等工作。</p>
<p>在这个领域里做了这么久，零零散散写过些东西，但是一直没有完整、系统地总结过这个领域里的方法论，现在是时候完成它了。</p>
<p>千言万语一张表：（注意里面子项有链接，可以深入了解）</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>分层</th>
<th>细节</th>
<th></th>
<th></th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>道</strong></td>
<td><a href="https://mp.weixin.qq.com/s/saFW6DfkSenR5rg9KlY5uA" target="_blank" rel="noopener">生态系统论</a>：像构建一个生态系统一样构建一个IT系统</td>
<td><a href="https://coolshell.cn/articles/10652.html" target="_blank" rel="noopener">控制逻辑正交</a>：本质是<br>『做什么(逻辑)』和<br>『怎么做(控制)』的隔离</td>
<td>掌握越多细节，优化空间越大<br></td>
</tr>
<tr>
<td><strong>术</strong></td>
<td><strong>收容数据</strong></td>
<td><strong>处理数据</strong></td>
<td><strong>产出数据</strong></td>
</tr>
<tr>
<td>高性能（资源有限时处理不能慢）</td>
<td>【怎么划分数据】动静、读写、冷热、时空、业务<br>【按什么结构存储数据】倒排结构、列存、顺序存、多级存储<br>【怎么描述数据】二进制描述<br>【怎么写入数据】并发写：<a href="https://lihongyu.me/2019/04/18/数据库字段规范及乐观锁常见错误/">乐观锁</a><br></td>
<td>分治<br>优秀的算法喜欢有序的数据<br>无锁</td>
<td><a href="https://mp.weixin.qq.com/s/TDJz9WLQercAvlMhHc1QDQ" target="_blank" rel="noopener">牺牲精确性</a><br><a href="https://coolshell.cn/articles/17416.html" target="_blank" rel="noopener">缓存</a></td>
</tr>
<tr>
<td>高可靠（数据不能丢、不能乱）</td>
<td><a href="https://mp.weixin.qq.com/s/aDYOrZdebNxMQEauu2_z3w" target="_blank" rel="noopener">WAL(write ahead log)</a><br> 对象尽量不可变，可变对象要避免线程竞争</td>
<td>【失败】fast fail原则<br></td>
<td>幂等</td>
</tr>
<tr>
<td>高可用（服务不能死）</td>
<td>多副本、Master-slave、Raft/Paxos</td>
<td>【状态】无状态设计<br>【依赖】尽量不依赖，<br>必须依赖的尽量异步依赖，<br>必须要同步依赖的就四步曲：<br>打日志，加超时，加限流，加降级</td>
<td>分页切片<br>探活</td>
</tr>
</tbody>
</table>
<h3 id="开发原则总结"><a href="#开发原则总结" class="headerlink" title="开发原则总结"></a>开发原则总结</h3><ol>
<li>用下一次的同步来表征上一次同步的ack，减少ack过程</li>
<li>运营支撑系统很重要，看不到业务监控等于没有业务</li>
<li>实现需求最大的困难不是设计出一个方案并实现出来，而是需要在若干个可能的方案中，甄选出最简单实用的那个。</li>
<li>大系统小做：除了最原子的业务（e.g.支付、打标）是开发出来的，大部分业务是涌现出来的（e.g.支付+补全—&gt;下发、微信单聊/群聊 对接收消息逻辑来说是统一的）</li>
<li>极简设计：最简单的方案最一致，最一致的方案最可靠</li>
<li>监控</li>
<li><ol>
<li>COE报告侧重于：如何避免同类型故障再次发生、提高故障主动发现能力、缩短故障响应和处理过程</li>
<li>ump key—&gt;agent collect—&gt;统一监控页面和报警配置</li>
</ol>
</li>
<li>master-master</li>
<li>协程</li>
</ol>
<h3 id="订单系统感悟汇总"><a href="#订单系统感悟汇总" class="headerlink" title="订单系统感悟汇总"></a>订单系统感悟汇总</h3><p>在订单二期需求讨论过程中，订单中心的定位和各字段的理解在不断更新和变化。拥抱需求变化，但是要以开发过程有可固化的原则为前提。</p>
<p>以下是讨论过程中形成的订单中心系统构建原则，欢迎拍砖，没被砖拍到的地方就默认可以执行了：</p>
<p>to 产品：</p>
<p>1、订单类型用于区分不同的状态流（如：实物、服务），订单打标用于区分同一状态流下的不同业务分支（如：定时达、周期送）</p>
<p>2、订单中心与外系统的关联关系只通过系统id保持（如：订单号，支付单号，结算单号……），不存储外系统内部业务信息</p>
<p>3、只提供订单号到外系统id的正向翻译功能，不提供逆向翻译功能</p>
<p>4、废除的原则：订单中心不主动改变订单状态，一切状态变更由外系统触发；改为：订单中心只做业务状态（如：等待付款、配送中）和系统状态（系统取消、暂停）的互转</p>
<p>to 研发：</p>
<p>1、如订单状态、订单类型等一切业务属性定义的变更都以支撑业务运转为准，只要系统技术结构不变，开发人员无需过多干预</p>
<p>2、领域系统（订单系统、结算系统）是骨骼，骨骼和骨骼之间要有关节，跨领域的领域语言翻译工作应在“关节”上进行</p>
<p>to All：</p>
<p>个人认为：</p>
<p>系统最后僵化死亡，往往是因为过多的业务限制，而不是技术无法支持，典型：京东现有的订单系统。所以在业务梳理中，最好不要以“流程是通的，流程可用”为目标。</p>
<p>订单中心做为业务核心系统，无论在业务上还是技术上，都应尽量将其设计成功能可插拔的插件式结构，方便扩展维护。</p>
<p>目前，业务上可以认为各系统id就是业务数据上的唯一插件接口，希望各位尽量保持这个插件接口的纯洁性。</p>
<p>技术上的插件式结构还在探索中，欢迎提供好的建议。</p>
<p>另外，有一个观点，欢迎大家拍砖：</p>
<p>系统开发是有边界的，不能和现实世界所有特殊情况都完全对应（例如系统里不会有“配送员发生交通事故，正在就医”这种状态，但是现实世界会有），实际业务开展应该以系统操作和线下灵活处理共同完成，不能一切都依赖系统。实际业务中的特殊情况应首要考虑线下灵活处理，而不是增加系统功能。总之，系统功能应该是可预期的，功能数量应该是可收敛的。</p>
]]></content>
      <categories>
        <category>总结思考</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>心领神会</tag>
        <tag>设计原则</tag>
        <tag>方法论</tag>
        <tag>java</tag>
        <tag>微服务</tag>
      </tags>
  </entry>
  <entry>
    <title>五维思考</title>
    <url>/2022/04/26/%E5%8D%87%E7%BB%B4%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<p><strong>你左右为难的时候，就是你需要升维思考的时候</strong></p>
<p><img src="/images/升维思考.jpg" alt></p>
<blockquote>
<p>本质上维度没有高低之分，这5个维度是全正交的等价维度，是“通向成功”的5个要素（注意不是“成功”，是“通向成功”）</p>
</blockquote>
]]></content>
      <tags>
        <tag>思考</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Flink的思考</title>
    <url>/2022/05/28/%E5%9F%BA%E4%BA%8EFlink%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h3 id="Flink的一些核心特性"><a href="#Flink的一些核心特性" class="headerlink" title="Flink的一些核心特性"></a>Flink的一些核心特性</h3><ol>
<li>基本能力：事件时间、窗口、有状态计算</li>
<li>高可靠：容错机制（checkpoint）</li>
<li>高可用：反压、base on k8s/yarn</li>
<li>高性能：独立的内存管理、独立序列化</li>
</ol>
<p>因为包揽了有状态计算，所以一定需要一个容错机制保障状态的高可靠</p>
]]></content>
      <tags>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>如何减缓软件复杂度的增长</title>
    <url>/2022/06/28/%E5%A6%82%E4%BD%95%E5%87%8F%E7%BC%93%E8%BD%AF%E4%BB%B6%E5%A4%8D%E6%9D%82%E5%BA%A6%E7%9A%84%E5%A2%9E%E9%95%BF/</url>
    <content><![CDATA[<p>读<a href="https://mp.weixin.qq.com/s/Dil5Ual1aI_7dsGKV0f6Ig" target="_blank" rel="noopener">《对抗软件复杂度的战争》</a> 有感而发</p>
<h2 id="为什么软件必然会变得越来越复杂"><a href="#为什么软件必然会变得越来越复杂" class="headerlink" title="为什么软件必然会变得越来越复杂"></a>为什么软件必然会变得越来越复杂</h2><blockquote>
<p>熵增定律：孤立系统总是趋向于熵增，最终达到熵的最大状态。但是，对开放系统而言，由于它可以将内部能量交换产生的熵增通过向环境释放热量的方式转移，所以开放系统有可能趋向熵减而达到有序状态。</p>
</blockquote>
<p>一个软件系统也可以看作是一个孤立系统，它的复杂度的不断提升实质上就对应了系统的熵增过程，而这是不可逆且必然的。因此，我们能做的是尽力的减慢这种变复杂的趋势。在对抗这种趋势之前，对问题进行本质上的拆解是很有意义的：</p>
<blockquote>
<p>全局复杂度 = 本质复杂度 + 偶然复杂度</p>
</blockquote>
<a id="more"></a>
<h2 id="如何尽量减缓这种变复杂的趋势"><a href="#如何尽量减缓这种变复杂的趋势" class="headerlink" title="如何尽量减缓这种变复杂的趋势"></a>如何尽量减缓这种变复杂的趋势</h2><h3 id="引入复杂的来源"><a href="#引入复杂的来源" class="headerlink" title="引入复杂的来源"></a>引入复杂的来源</h3><p>原文中的阐述，引入复杂性的来源有4个：</p>
<ol>
<li>本质复杂度<ol>
<li>业务复杂度的增长</li>
</ol>
</li>
<li>偶然复杂度<ol>
<li>系统问题：分布式系统规模的增长</li>
<li>人的问题：团队规模的增长</li>
<li>人的问题：关键干系人目标的因素</li>
</ol>
</li>
</ol>
<h3 id="哪些可以抗争？哪些只能躺平？"><a href="#哪些可以抗争？哪些只能躺平？" class="headerlink" title="哪些可以抗争？哪些只能躺平？"></a>哪些可以抗争？哪些只能躺平？</h3><p>其中本质复杂度来自问题空间，是无法简化的。这部分可以躺平。<br>而偶然复杂度来自方案空间，是可以通过人为的努力去简化，甚至消除的。最理想的情况是偶然复杂度为0。</p>
<h3 id="对于能抗争的来源，怎么抗争？"><a href="#对于能抗争的来源，怎么抗争？" class="headerlink" title="对于能抗争的来源，怎么抗争？"></a>对于能抗争的来源，怎么抗争？</h3><h4 id="针对系统问题，分三个层次的解决方案。"><a href="#针对系统问题，分三个层次的解决方案。" class="headerlink" title="针对系统问题，分三个层次的解决方案。"></a>针对系统问题，分三个层次的解决方案。</h4><ol>
<li>微观：控制逻辑正交+有效的高质量的单元测试</li>
<li>中观：系统架构梳理和维护。<ol>
<li>康威定律说：“任何系统设计的系统，其系统结构会复制组织的沟通结构。”</li>
<li>所以系统架构和组织，也就是人的问题有关。</li>
</ol>
</li>
<li>宏观：正确的技术战略，把分布式系统的复杂度外包（阿里、AWS、Azure、谷歌）</li>
</ol>
<h4 id="针对人的问题"><a href="#针对人的问题" class="headerlink" title="针对人的问题"></a>针对人的问题</h4><p>任何一个组织、部门作为一个“生命体”都有扩大自身的欲望和趋势。 一旦扩大到一定规模，就不受任何一个个人完全控制了。这是内禀的。<br>因此，我认为解决人的问题的方案只有<strong>控制人数，提高质量</strong>这一条路径。（没错，真正的解决方案就是这么简单直接）</p>
<h4 id="扩展思考"><a href="#扩展思考" class="headerlink" title="扩展思考"></a>扩展思考</h4><p>既然孤立系统必然熵增，那是否可以考虑把软件系统变成一个开放系统呢？通过热交换，维持自身的有序？这意味着持续的“能量”输入（Code Review？架构宣导？新人加入？）</p>
]]></content>
      <tags>
        <tag>软件复杂度</tag>
      </tags>
  </entry>
  <entry>
    <title>基于使用场景谈TestNG+JMockit+AssertJ的最佳实践</title>
    <url>/2019/04/02/%E5%9F%BA%E4%BA%8E%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF%E8%B0%88TestNG-JMockit-AssertJ%E7%9A%84%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5/</url>
    <content><![CDATA[<h2 id="个人对单测的理解"><a href="#个人对单测的理解" class="headerlink" title="个人对单测的理解"></a>个人对单测的理解</h2><ol>
<li>程序的结构只因架构设计变化而变化，方法访问权限在够用的情况下，越小越好，这些不能因为单测的影响而改变。</li>
<li>单测也是代码的一部分，评估需求，排期都要算在内。</li>
<li>交付的标准里应该包括至少90%的单测覆盖率。</li>
<li>单测代码也是要被测试的，所以<strong>突变测试(mutation testing)</strong>（改程序逻辑，单测应该能用“Fail”检测到这个变更）也要抽样做。<a id="more"></a>
<h2 id="不说Feature，只谈场景"><a href="#不说Feature，只谈场景" class="headerlink" title="不说Feature，只谈场景"></a>不说Feature，只谈场景</h2>分别介绍TestNG/JMockit/AssertJ三个框架feature的文章汗牛充栋，在此不赘述，但是就像<a href="https://www.atatech.org/articles/96929" target="_blank" rel="noopener">《最佳实践有多重要？》</a>这篇文章里提到的，没有最佳实践，很多feature不知道什么情况下适用，慢慢也就忘记还有这样的feature了。</li>
</ol>
<p>下面列出了一些单测中遇到的比较棘手的场景，和对应的最佳实践，如果有更好的做法，欢迎补充、更新。</p>
<hr>
<h3 id="场景0，private-method，怎么单测？"><a href="#场景0，private-method，怎么单测？" class="headerlink" title="场景0，private method，怎么单测？"></a>场景0，private method，怎么单测？</h3><p>一般有两种处理方式：</p>
<ol>
<li>反射后，<code>setAccessible(true)</code>，并执行</li>
<li>跟随private的调用方一起单测</li>
</ol>
<p>个人认为选择的策略是考虑private方法逻辑的独立性，独立性强，入参容易构建，选1，反之，选2。</p>
<h3 id="场景1，void-method，且逻辑stateful，怎么单测？"><a href="#场景1，void-method，且逻辑stateful，怎么单测？" class="headerlink" title="场景1，void method，且逻辑stateful，怎么单测？"></a>场景1，void method，且逻辑stateful，怎么单测？</h3><p>Java里的void method往往对应了procedure的概念，而不是function，没有可供assert的输出。如果观察逻辑是有状态的，且被private修饰，可以通过反射+<code>setAccessible(true)</code>的方式拿到对象的状态，再通过assert验证状态的正确性。</p>
<h3 id="场景2，void-method，且逻辑stateless，怎么单测？"><a href="#场景2，void-method，且逻辑stateless，怎么单测？" class="headerlink" title="场景2，void method，且逻辑stateless，怎么单测？"></a>场景2，void method，且逻辑stateless，怎么单测？</h3><p>有一种不太常见的情况，逻辑无状态，且method不输出结果，也不输出到对象状态，而是输出到框架和运行环境，几乎没有可以assert的内容。</p>
<p>e.g. ODPS的UDTF</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Object[] args)</span> <span class="keyword">throws</span> UDFException, IOException </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">       forward(i, <span class="string">"abc"</span>);<span class="comment">//forward内部实现会因运行环境不同而不同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这种情况可以采用JMockit，将被调用的框架方法“劫持”，把框架方法的实现换成可以产生状态的逻辑，最后输出结果，并assert验证。伪代码如下，注意这里mock的方法并不是public，事实上，即使private也是可以的，这也是JMockit的抓手之一：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Lists.newArrayList(xx,yy,zz);</span><br><span class="line">Map&lt;Object, Object&gt; result = Maps.newHashMap();</span><br><span class="line">ExpectedTimePositionExplode mock = <span class="keyword">new</span> MockUp&lt;ExpectedTimePositionExplode&gt;()&#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">forward</span><span class="params">(Object... outs)</span> <span class="keyword">throws</span> UDFException </span>&#123;</span><br><span class="line">        result.put(outs[<span class="number">0</span>], outs[<span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;.getMockInstance();</span><br><span class="line">mock.process(<span class="keyword">new</span> Object[]&#123;list&#125;);</span><br><span class="line">assertThat(result).hasSize(<span class="number">3</span>).containsValues(<span class="number">0</span>,<span class="number">12</span>,<span class="number">7</span>);</span><br></pre></td></tr></table></figure></p>
<h3 id="场景3，逻辑里大量和运行环境的交互，构造环境很困难，怎么单测？"><a href="#场景3，逻辑里大量和运行环境的交互，构造环境很困难，怎么单测？" class="headerlink" title="场景3，逻辑里大量和运行环境的交互，构造环境很困难，怎么单测？"></a>场景3，逻辑里大量和运行环境的交互，构造环境很困难，怎么单测？</h3><p>如果一段逻辑中，大量需要和运行环境交互，这时开发者一般为了避免麻烦，会mock大段逻辑，覆盖率会下降，不推荐。</p>
<p>推荐做法有三种：<br></p>
<ol>
<li><p>基于行为mock：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Expectations() &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        parquetReader.read();</span><br><span class="line">        SimpleRecord simpleRecord = <span class="keyword">new</span> SimpleRecord();</span><br><span class="line">        simpleRecord.add(<span class="string">"abc"</span>, <span class="string">"jared"</span>);</span><br><span class="line">        result = simpleRecord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
</li>
<li><p>基于对象mock：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ExecutionContext mockExecutionContext = <span class="keyword">new</span> MockUp&lt;ExecutionContext&gt;() &#123;</span><br><span class="line">    <span class="meta">@Mock</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">claimAlive</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;.getMockInstance();</span><br></pre></td></tr></table></figure>
</li>
<li><p>使用运行环境提供的local-implement，e.g. ODPS <code>SourceInputStream</code> 接口的实现，在运行时有专门的基于网络的实现，且不开源，单测时无法构造，且诸多方法都需要mock，mock时还需要了解每一个API的定义，很麻烦。但是随接口发布的还有一个本地实现 <code>LocalInputStream</code>，单测时可以利用上，个人理解这种本地实现应该就是为了调试方便而设计的。</p>
</li>
</ol>
<h3 id="场景4，逻辑有依赖关系，怎么在单测中体现出来？"><a href="#场景4，逻辑有依赖关系，怎么在单测中体现出来？" class="headerlink" title="场景4，逻辑有依赖关系，怎么在单测中体现出来？"></a>场景4，逻辑有依赖关系，怎么在单测中体现出来？</h3><p>代码使用了Template模式时，往往父类定义逻辑执行顺序，子类具体实现每一个方法。如下面三个方法执行顺序是setup(初始化) -&gt; extract(正式业务) -&gt; close(关闭资源)<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Extractor</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setup</span><span class="params">(ExecutionContext ctx, InputStreamSet inputs, DataAttributes attributes)</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Record <span class="title">extract</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>对上面三个方法实现的单测，一般也需要按顺序依次进行，这时可以利用<code>@Test(dependsOnMethods = &quot;setup&quot;)</code>在每一个单测方法上指定依赖的上游，上游完成下游执行；上游报错，下游ignore。</p>
<h3 id="场景5，每次maven构建带单测过程漫长，怎么破？"><a href="#场景5，每次maven构建带单测过程漫长，怎么破？" class="headerlink" title="场景5，每次maven构建带单测过程漫长，怎么破？"></a>场景5，每次maven构建带单测过程漫长，怎么破？</h3><p>构建时很慢可以采用多线程执行单测，以减少单测时间。</p>
<p>在testng.xml中可以设置thread-count和需要并行执行的单元（方法、类或suite）<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">suite</span> <span class="attr">name</span>=<span class="string">"Concurrency Suite"</span> <span class="attr">parallel</span>=<span class="string">"methods"</span> <span class="attr">thread-count</span>=<span class="string">"3"</span> &gt;</span></span><br></pre></td></tr></table></figure></p>
<p>同时pom.xml中设置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">suiteXmlFiles</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">suiteXmlFile</span>&gt;</span>src/test/resources/testng.xml<span class="tag">&lt;/<span class="name">suiteXmlFile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">suiteXmlFiles</span>&gt;</span>                   </span><br><span class="line">    <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>值得注意的是，即使在多线程单测环境下，<code>@Test(dependsOnMethods = &quot;method1&quot;)</code>也是得到保证的，依赖关系不会乱，可以放心用。</p>
</blockquote>
<h3 id="场景6，验证线程安全性问题，怎么单测？"><a href="#场景6，验证线程安全性问题，怎么单测？" class="headerlink" title="场景6，验证线程安全性问题，怎么单测？"></a>场景6，验证线程安全性问题，怎么单测？</h3><p>用<code>@Test(threadPoolSize = 3, invocationCount = 6, timeOut = 1000)</code>注解测试方法，可以构造并发执行环境，用于验证线程安全性问题。</p>
<p>e.g.<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="meta">@Test</span>(threadPoolSize = <span class="number">10</span>, invocationCount = <span class="number">100</span>, timeOut = <span class="number">1000</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Test</span>(dependsOnMethods = <span class="string">"method4"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    assertThat(i).isEqualTo(<span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>运行method2，结果：<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">org.junit.ComparisonFailure: </span><br><span class="line">Expected :[100]</span><br><span class="line">Actual   :[97]</span><br></pre></td></tr></table></figure></p>
<h3 id="场景7，多个边界测试数据测相同逻辑，写多个测试case代码冗长且测试数据不能复用，怎么破？"><a href="#场景7，多个边界测试数据测相同逻辑，写多个测试case代码冗长且测试数据不能复用，怎么破？" class="headerlink" title="场景7，多个边界测试数据测相同逻辑，写多个测试case代码冗长且测试数据不能复用，怎么破？"></a>场景7，多个边界测试数据测相同逻辑，写多个测试case代码冗长且测试数据不能复用，怎么破？</h3><p>如果你写过这样的单测<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">evaluate = distance.evaluate(<span class="number">7</span>);</span><br><span class="line">assertThat(evaluate).isGreaterThan(<span class="number">0</span>);</span><br><span class="line">evaluate = distanceBucket.evaluate(<span class="number">9</span>);</span><br><span class="line">assertThat(evaluate).isGreaterThan(<span class="number">0</span>);</span><br><span class="line">evaluate = distanceBucket.evaluate(<span class="number">5</span>);</span><br><span class="line">assertThat(evaluate).isGreaterThan(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p>
<p>那你可能需要考虑一下<code>@DataProvider</code>注解，帮你分离测试数据和逻辑，逻辑更清晰简洁，还可以实现测试数据的复用。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span>(dataProvider = <span class="string">"ppp"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testParameters</span><span class="params">(Integer p)</span> </span>&#123;</span><br><span class="line">    assertThat(p).isGreaterThan(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@DataProvider</span>(name = <span class="string">"ppp"</span>)</span><br><span class="line"><span class="keyword">public</span> Object[] paramProvider() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Object[] &#123;<span class="number">7</span>, <span class="number">9</span>, <span class="number">5</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>总结思考</category>
      </categories>
      <tags>
        <tag>UnitTest</tag>
      </tags>
  </entry>
  <entry>
    <title>小学数学应该学什么</title>
    <url>/2022/04/06/%E5%B0%8F%E5%AD%A6%E6%95%B0%E5%AD%A6%E5%BA%94%E8%AF%A5%E5%AD%A6%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<p>摘自 民间数学家的<a href="https://mp.weixin.qq.com/s/vhMQkAF64kB8fEwAlouFpQ?r=0.809623703227145#wechat_redirect" target="_blank" rel="noopener">《小学数学究竟该教什么，究竟该学什么？培优的大方向究竟在哪里？》</a><br><a id="more"></a></p>
<ol>
<li>不要过度强调竖式计算，多强调算术原理：<blockquote>
<ol>
<li>减法是加法的逆过程，除法是乘法的逆过程</li>
<li>每个数加0，不变，每个数乘1，不变</li>
</ol>
</blockquote>
</li>
<li>数轴——横跨算术和几何两个世界的桥梁！<ol>
<li>加法：数轴右移（平移变换）</li>
<li>乘法：数轴拉长（伸缩变换）</li>
<li>复数：平面坐标绕原点的（旋转变换）</li>
<li>复数共轭：数轴绕X轴的（翻转变换）</li>
</ol>
</li>
<li>五大运算定律<ol>
<li>加法：结合律、交换律（对应数轴的两次平移，不论先做哪个，结果都一样）</li>
<li>乘法：结合律、交换律（对应数轴的两次伸缩，不论先做哪个，结果都一样）<br> 也可以用计数图理解<br>  <img src="/images/计数图1.jpg" alt="乘法交换律"><br>   <img src="/images/计数图2.jpg" alt="乘法结合律"><br>   <img src="/images/加法乘法分配率.jpg" alt="加法乘法分配律">      </li>
</ol>
</li>
<li>引入分数：分数是整数的扩展，而不是并列关系</li>
<li>引入方程和代数：方程是对数与数关系的抽象，是问题的本质，是根基、是核心。</li>
</ol>
]]></content>
      <tags>
        <tag>教育</tag>
      </tags>
  </entry>
  <entry>
    <title>摄影考虑因素的优先级</title>
    <url>/2023/01/05/%E6%91%84%E5%BD%B1%E8%80%83%E8%99%91%E5%9B%A0%E7%B4%A0%E7%9A%84%E4%BC%98%E5%85%88%E7%BA%A7/</url>
    <content><![CDATA[<ol>
<li>到达</li>
<li>视角    </li>
<li>构图</li>
<li>色彩，黑白</li>
<li>感染力：<ol>
<li>真实</li>
<li>一张照片只有一个主题</li>
<li>风景：别人看了也想去</li>
</ol>
</li>
</ol>
<a id="more"></a>
<p>视角<br><img src="/images/摄影考虑因素的优先级/IMG_1942.JPG" alt><br><img src="/images/摄影考虑因素的优先级/IMG_1943.JPG" alt><br><img src="/images/摄影考虑因素的优先级/IMG_1944.JPG" alt></p>
<p>构图：主动使用几何结构：三角构图，圆形构图，螺旋线构图<br><img src="/images/摄影考虑因素的优先级/IMG_1950.JPG" alt><br><img src="/images/摄影考虑因素的优先级/IMG_1949.JPG" alt></p>
<p>色彩</p>
<p>橙配蓝，红配绿，金配紫</p>
<p><img src="/images/摄影考虑因素的优先级/IMG_1947.JPG" alt><br><img src="/images/摄影考虑因素的优先级/IMG_1946.JPG" alt><br><img src="/images/摄影考虑因素的优先级/IMG_1945.JPG" alt></p>
]]></content>
      <tags>
        <tag>摄影</tag>
      </tags>
  </entry>
  <entry>
    <title>到底有没有前途</title>
    <url>/2023/01/05/%E5%88%B0%E5%BA%95%E6%9C%89%E6%B2%A1%E6%9C%89%E5%89%8D%E9%80%94/</url>
    <content><![CDATA[<p>八年前看罗胖的视频<a href="https://www.youtube.com/watch?v=00xxWbbk9CI" target="_blank" rel="noopener">《中国为什么有前途》</a>，当时总结中国有前途的几个依据如下：</p>
<ol>
<li>资源陷阱：摆脱资源的诅咒</li>
<li>人口陷阱：<ol>
<li>人口被控制住了</li>
<li>年轻人，人人都奋斗，都拼搏，人人都不甘于现状</li>
<li>受教育人口多，可以有更细密的分工与合作（西班牙百万人–&gt;英国千万人–&gt;美国亿人–&gt;中国十亿人）</li>
</ol>
</li>
<li>赶超陷阱：不挑不拣，不封闭</li>
<li>政治陷阱：我们有强人政治，可以避免错误的民族主义抬头<br>视频的意思是，能同时绕开这四个陷阱的国家历史上只有新加坡做到过，而我们，将是第二个！</li>
</ol>
<a id="more"></a>
<p>然而，<br>八后之后，<br>我们再回看，<br>你觉得我们绕过了几个呢？</p>
<ol>
<li>人口被控制住了还是好事吗？</li>
<li>年轻人还想着奋斗吗？</li>
<li>还是不封闭吗？</li>
<li>民族主义抬头了吗？</li>
</ol>
<p>现在：</p>
<p>我们到底是法治还是人治？<br>人口老龄化势不可挡？<br>创新能成为国家增长支柱了吗？<br>科学规律、市场规律我们尊重了吗？</p>
]]></content>
  </entry>
  <entry>
    <title>乐观锁维护原则及常见错误</title>
    <url>/2019/04/18/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E8%A7%84%E8%8C%83%E5%8F%8A%E4%B9%90%E8%A7%82%E9%94%81%E5%B8%B8%E8%A7%81%E9%94%99%E8%AF%AF/</url>
    <content><![CDATA[<h2 id="乐观锁维护原则"><a href="#乐观锁维护原则" class="headerlink" title="乐观锁维护原则"></a>乐观锁维护原则</h2><ol>
<li><h3 id="使用版本号的乐观锁-SQL"><a href="#使用版本号的乐观锁-SQL" class="headerlink" title="使用版本号的乐观锁 SQL"></a>使用版本号的乐观锁 SQL</h3><blockquote>
<p>update tab_xxx<br>set column1=#{field1Value}, column2=#{field2Value},…<br><strong>sys_version=sys_version+1</strong>, update_pin=#{updatePin}, update_time=now()<br>where     id=#{id} and <strong>sys_version=#{sysVersion}</strong> and yn=0</p>
<a id="more"></a>
</blockquote>
</li>
<li><h3 id="程序处理流程"><a href="#程序处理流程" class="headerlink" title="程序处理流程"></a>程序处理流程</h3><ol>
<li>判断SQL更新影响行数。如果为 0，说明这条数据已经被其它线程更新，并发更新失败</li>
<li>反查数据。因为乐观锁导致，更新条数为0时（并发更新）要反查数据，如果已经改为目标结果，返回“已被他人执行成功”的结果，不能直接返回失败，也不能直接返回成功。</li>
<li>重试更新操作。具体重试采取系统再次取数据后更新的方式，还是提示给客户重新操作的方式,每个系统视具体场景而定。</li>
</ol>
</li>
<li><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li>有sysVersion却在update语句里没体现</li>
<li>sql体现了sysVersion，在程序里没对更新结果条数做判断</li>
<li>对更新结果条数做了判断，但是只要条数为0就抛异常（实际可能已经被其它线程执行成功），没有就地反查比对结果</li>
<li>就地反查比对结果了，当前状态和预期状态一致就返回执行成功，没有告知是其它线程执行成功的，导致当前线程的调用方认为是自己执行成功的，进而执行后续逻辑（实际已经被其它相同逻辑的线程执行过）。</li>
</ol>
</li>
</ol>
]]></content>
      <categories>
        <category>总结思考</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>乐观锁</tag>
      </tags>
  </entry>
  <entry>
    <title>最近一些零星的认知汇总</title>
    <url>/2022/02/21/%E6%9C%80%E8%BF%91%E4%B8%80%E4%BA%9B%E9%9B%B6%E6%98%9F%E7%9A%84%E8%AE%A4%E7%9F%A5%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<ol>
<li>由人组成的社会是一个混沌的、紧耦合的、动态平衡的整体系统，且这个系统正在变得越来越紧耦合，这意味着信息流转效率变高的同时，作为一个整体的脆弱性也在增加</li>
<li>对其中任何对一个单点的作用都会逐渐的影响到系统里的其它节点。</li>
<li>如果想给整体系统一个向上的力，那只有科技进步这一种方式，而不是对一个节点用猛力</li>
<li>成事：<ol>
<li>微观能力：精益求精（比如优秀的代码设计、优秀的文档能力）</li>
<li>中观能力：做事条理性；避免做事陷入细节、陷入争论、没有打法；流畅地表达也依赖条理性（目前缺乏这部分）</li>
<li>宏观能力：自我认知+自驱力+价值感，参考 <a href="认知分层标准以及我们应该争论什么.md">《认知分层标准以及我们应该争论什么》</a></li>
</ol>
</li>
<li>目前做事一直是凭基础能力，本能，缺少刻意练习，刻意纠正</li>
<li>学得东西不需要很多，但是学一个，要真正的实践一个，解决一个现实中的问题。比如睡眠、降脂，要真的去做。</li>
</ol>
]]></content>
      <tags>
        <tag>认知升级</tag>
      </tags>
  </entry>
  <entry>
    <title>最佳实践有多重要？</title>
    <url>/2019/04/09/%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5%E6%9C%89%E5%A4%9A%E9%87%8D%E8%A6%81%EF%BC%9F/</url>
    <content><![CDATA[<blockquote>
<p>大概率的说，比我们想像的更重要。</p>
</blockquote>
<p>一个常见的情况是，很多工具的使用往往提供了一些概念上的扩展点，比如：</p>
<ul>
<li>Tmux提供分屏能力时，给出了session/window/pane等操作实体概念； </li>
<li>odps提供计算能力时，给出了project/table/column等实体概念；</li>
</ul>
<p>这些多层次的实体概念在权限管理、资源分配等管理操作上提供了很多灵活性。但也带来了一个常见的问题：在文档交代不明确的时候，会让使用者在不明确一个概念的系统定位时，出现误用的现象，导致工具本身使用的过程充满了坎坷和限制，达不到最好的使用效果。如：<br><a id="more"></a></p>
<ul>
<li>Tmux中，window对应project，pane对应environment，导致session永远没有使用的场景，而大量的window堆积带来了查找上的困难。</li>
<li>ODPS project对应了现实组织中的“部门”，导致业务混杂在一起，依赖关系不明确，统计分析没有可供划分的维度，权限管理基本失效，所有人可以看到所有业务数据。</li>
</ul>
<p>这时候比较能体现Best Practise的意义：</p>
<ul>
<li>Tmux中，session对应project，window对应environment，pane对应shell，充分利用每一个维度提供的管理能力，管理压力小</li>
<li>odps中，project对应实际中的业务项目，权限和资源在不同的业务特征下，给不同project分配、调整，同时兼顾了灵活、安全。</li>
</ul>
<p><strong>这一切的前提是要对工具的使用场景和工具里每一个概念的系统定位、背影，以及作者的设计初衷有比较深刻的了解才行。</strong></p>
<blockquote>
<p>没有对设计初衷的准确把握，所有feature之和小于工具本身。</p>
</blockquote>
<p>反过来说，在设计一个工具时，自动屏蔽掉所有可能出错的路径，让用户没有犯错的机会，是一个工具开发者能力的体现。</p>
<p>P.S.<br>《设计心理学》是唐纳德·诺曼关于设计本质的理论著作，里面对设计本质的概括到今天仍然广泛适用：</p>
<ul>
<li>示能：告诉你我的feature， e.g. 耳机音量键的设计</li>
<li><strong><em>约束：根本不给用户犯错的机会</em></strong>，e.g.搜索框的设计</li>
<li>映射：产品设计和日常生活有映射关系，e.g.文件系统里的文件夹</li>
<li>反馈：即刻的有效反馈会粘住用户，e.g.进度条</li>
</ul>
]]></content>
      <categories>
        <category>总结思考</category>
      </categories>
      <tags>
        <tag>最佳实践</tag>
      </tags>
  </entry>
  <entry>
    <title>搞定睡眠这件大事</title>
    <url>/2022/02/21/%E6%90%9E%E5%AE%9A%E7%9D%A1%E7%9C%A0%E8%BF%99%E4%BB%B6%E5%A4%A7%E4%BA%8B/</url>
    <content><![CDATA[<h2 id="增加睡眠动力"><a href="#增加睡眠动力" class="headerlink" title="增加睡眠动力"></a>增加睡眠动力</h2><ol>
<li>确定睡眠周期</li>
<li>有氧运动</li>
<li>晒太阳</li>
<li>避免白天睡觉</li>
</ol>
<a id="more"></a>
<h2 id="减少睡眠阻力"><a href="#减少睡眠阻力" class="headerlink" title="减少睡眠阻力"></a>减少睡眠阻力</h2><ol>
<li>睡眠仪式感：隔离日常生活和睡眠：散步，泡脚，听得到</li>
<li>放松反射：重复一个词10分钟</li>
<li>缓解心理焦虑：不要怕失眠。死不了人<h2 id="构建好的睡眠环境"><a href="#构建好的睡眠环境" class="headerlink" title="构建好的睡眠环境"></a>构建好的睡眠环境</h2><img src="/images/好的睡眠环境.jpeg" alt></li>
</ol>
<h2 id="怎么执行起来"><a href="#怎么执行起来" class="headerlink" title="怎么执行起来"></a>怎么执行起来</h2><p>可以落地执行的方法，叫做睡眠改善微习惯，“每天一二三，睡眠就改善”。一二三，意思是 “早上一个点起床，白天晒两分钟太阳，睡前做三件事”。哪三件事？</p>
<blockquote>
<p>一是把窗帘拉好，房间调暗，避免蓝光。<br>二是把房间的温度调到22到25摄氏度，让环境能够凉下来。<br>三是给自己一些有意识的放松，比如看一看书，听一听得到，做一做冥想或者放松反射练习。</p>
</blockquote>
]]></content>
  </entry>
  <entry>
    <title>系统构建英语语法</title>
    <url>/2022/05/26/%E7%B3%BB%E7%BB%9F%E6%9E%84%E5%BB%BA%E8%8B%B1%E8%AF%AD%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h2 id="〇、学语法的唯一目的：造句"><a href="#〇、学语法的唯一目的：造句" class="headerlink" title="〇、学语法的唯一目的：造句"></a>〇、学语法的唯一目的：造句</h2><ol>
<li>简单句</li>
<li>复杂（复合）句</li>
</ol>
<a id="more"></a>
<h2 id="一、造句"><a href="#一、造句" class="headerlink" title="一、造句"></a>一、造句</h2><h3 id="1-简单句的定义"><a href="#1-简单句的定义" class="headerlink" title="1. 简单句的定义"></a>1. 简单句的定义</h3><blockquote>
<p>最简单的句子：什么（主语）+怎么样（谓语）</p>
</blockquote>
<h3 id="2-简单句类型"><a href="#2-简单句类型" class="headerlink" title="2. 简单句类型"></a>2. 简单句类型</h3><ol>
<li>主语+不及物动词</li>
<li>主语+单及物动词+宾语</li>
<li>主语+双及物动词+间接宾语+直接宾语</li>
<li>主语+复杂及物动词+宾语+宾语补语</li>
<li>主语+连系动词+主语补语（表语）</li>
</ol>
<h3 id="3-复杂句的定义"><a href="#3-复杂句的定义" class="headerlink" title="3. 复杂句的定义"></a>3. 复杂句的定义</h3><blockquote>
<p>复合句=简单句的并列<br>复杂句=简单句的嵌套</p>
</blockquote>
<h3 id="4-复杂句的成分"><a href="#4-复杂句的成分" class="headerlink" title="4. 复杂句的成分"></a>4. 复杂句的成分</h3><ol>
<li>主语</li>
<li>谓语动词</li>
<li>宾语</li>
<li>主语补足语</li>
<li>宾语补足语</li>
<li>定语</li>
<li>状语</li>
<li>同位语</li>
</ol>
<h3 id="5-从句的类型"><a href="#5-从句的类型" class="headerlink" title="5. 从句的类型"></a>5. 从句的类型</h3><table>
<thead>
<tr>
<th></th>
<th>成分</th>
<th>从句类型</th>
<th>类别</th>
</tr>
</thead>
<tbody>
<tr>
<td>简单句</td>
<td>作主语</td>
<td>主语从句</td>
<td>名词性从句</td>
</tr>
<tr>
<td>简单句</td>
<td>作宾语</td>
<td>宾语从句</td>
<td>名词性从句</td>
</tr>
<tr>
<td>简单句</td>
<td>作表语</td>
<td>表语从句</td>
<td>名词性从句</td>
</tr>
<tr>
<td>简单句</td>
<td>作同位语</td>
<td>同位语从句</td>
<td>名词性从句</td>
</tr>
<tr>
<td>简单句</td>
<td>作定语</td>
<td>定语从句</td>
<td>定语从句</td>
</tr>
<tr>
<td>简单句</td>
<td>作状语</td>
<td>状语从句</td>
<td>状语从句</td>
</tr>
</tbody>
</table>
<h2 id="二、词性"><a href="#二、词性" class="headerlink" title="二、词性"></a>二、词性</h2><ol>
<li>名词</li>
<li><strong>动词（特别重要，英语语法的起点和抓手）</strong></li>
<li>冠词</li>
<li>代词</li>
<li>形容词</li>
<li>数词</li>
<li>副词</li>
<li>介词</li>
<li>叹词</li>
<li>连词</li>
</ol>
<h2 id="三、动词"><a href="#三、动词" class="headerlink" title="三、动词"></a>三、动词</h2><h3 id="1-谓语动词（中文没有！）"><a href="#1-谓语动词（中文没有！）" class="headerlink" title="1. 谓语动词（中文没有！）"></a>1. 谓语动词（中文没有！）</h3><ol>
<li>动作时间：过去、现在、将来、过去将来</li>
<li>动作状态：一般、完成、进行、完成进行</li>
<li>动作语气：假设、情感（虚拟语气、陈述语气、祈使语气）</li>
</ol>
<p><img src="/images/时态.jpg" alt="时态"></p>
<h4 id="1-1-助动词"><a href="#1-1-助动词" class="headerlink" title="1.1 助动词"></a>1.1 助动词</h4><p><em>帮助谓语动词表达含义  e.g. eat </em></p>
<table>
<thead>
<tr>
<th>协助做什么</th>
<th>助动词</th>
<th>呈现效果</th>
</tr>
</thead>
<tbody>
<tr>
<td>（协助）表示完成（吃过了）</td>
<td>have</td>
<td>have eaten</td>
</tr>
<tr>
<td>（协助）表示进行（正在吃）</td>
<td>be</td>
<td>is eating</td>
</tr>
<tr>
<td>（协助）表示“被吃”</td>
<td>be</td>
<td>be eaten</td>
</tr>
<tr>
<td>（协助）表示“有能力吃”</td>
<td>can</td>
<td>can eat</td>
</tr>
<tr>
<td>（协助）表示“有可能吃”</td>
<td>might</td>
<td>might eat</td>
</tr>
<tr>
<td>（协助）表示“有义务吃”</td>
<td>must</td>
<td>must eat</td>
</tr>
<tr>
<td>（协助）表示否定（不吃）</td>
<td>do</td>
<td>do not eat</td>
</tr>
</tbody>
</table>
<h3 id="2-非谓语动词"><a href="#2-非谓语动词" class="headerlink" title="2. 非谓语动词"></a>2. 非谓语动词</h3><p>可以做除了谓语以外的所有成分</p>
<ol>
<li>动词不定式</li>
<li>现在分词</li>
<li>动名词</li>
<li>过去分词</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>蔚来之夏•贝尔生存训练营•神农架站的几个瞬间</title>
    <url>/2022/09/06/%E8%94%9A%E6%9D%A5%E4%B9%8B%E5%A4%8F%E2%80%A2%E8%B4%9D%E5%B0%94%E7%94%9F%E5%AD%98%E8%AE%AD%E7%BB%83%E8%90%A5%E2%80%A2%E7%A5%9E%E5%86%9C%E6%9E%B6%E7%AB%99/</url>
    <content><![CDATA[<p><img src="/images/神农架穿越/大镖客.png" alt></p>
<p>这是一段现实版的神农架荒野大镖客经历，更是一段堪称神奇的经历：核酸阻碍导致延误开营，大家决定披星戴月急行军13km荒野山路，互帮互助凌晨4点到达目的地；第二天吃虫、生火、滤水、翻岩壁、冲顶神农架、翻越高山草甸、露营荒野；第三天凌晨拔营，穿山野小涧，深入原始森林，海拔直降800米。翻山越岭总行程28km，累计海拔升降2300。</p>
<blockquote>
<p>总的来说两点收获</p>
<ol>
<li>荒野穿越可以激发善意</li>
<li>离贝爷最近的一次</li>
</ol>
</blockquote>
<a id="more"></a>
<p>具体的训练营过程我们一起战斗的小伙伴们已经写的很详细了，我偷个懒，直接上传送门：<br><a href="https://app.nio.com/app/web/v2/share_comment?id=2118029&amp;type=essay" target="_blank" rel="noopener">一场心无旁骛的神农架穿越之旅</a><br><a href="https://app.nio.com/app/web/v2/share_comment?id=2117919&amp;type=essay" target="_blank" rel="noopener">蔚来勇士凯旋归来！</a><br><a href="https://app.nio.com/app/web/v2/share_comment?id=2117927&amp;type=essay" target="_blank" rel="noopener">48小时 · 穿越神农架</a><br><a href="https://app.nio.com/app/web/v2/share_comment?id=2118675&amp;type=essay" target="_blank" rel="noopener">湘西极地 鄂渝相连|48小时极限穿越神农架</a></p>
<p>我说几个印象深刻的瞬间，正是这些瞬间就像珍珠，让整个体验熠熠生辉，难以忘怀。</p>
<h4 id="1-个人的坚持"><a href="#1-个人的坚持" class="headerlink" title="1. 个人的坚持"></a>1. 个人的坚持</h4><p>本次行程有11名队员，分成两个组，我是一队的队长，组里的郝哥是年龄最长的成员。行程开始几公里进入海拔爬升阶段后，因为身上有十多斤的负重，郝哥的体力下降比较多，听教练说嘴唇都发白了，心率估计也非常高。说实话，看大哥的步态已经很沉了，可以感受到他每一步都需要咬牙才行。教练让我们帮忙分担重量，但是郝哥担心耽误大家的行进速度，执意要自己坚持负重自己走，大家劝了很多次，大哥还是想坚持。郝哥多大的负担都争取自己抗，决不拖累团队的精神很让人钦佩！体力可以下降，精神永远在线！就这样大哥自己又坚持了好几公里，真心不易。</p>
<p><img src="/images/神农架穿越/出发.jpeg" alt><br><img src="/images/神农架穿越/夜行.jpeg" alt><br><img src="/images/神农架穿越/夜行2.jpeg" alt></p>
<h4 id="2-团队的协作"><a href="#2-团队的协作" class="headerlink" title="2. 团队的协作"></a>2. 团队的协作</h4><p>郝哥体力下降越来越快，团队的小伙伴就开始不断询问他的情况，逐步帮他分担负重。梁哥是第一个帮忙的，把郝哥的水都默默分担在自己包上了，走了很久。后来遇到大上坡，我几乎是从郝哥身上抢过来了冲锋包（因为他不愿意给），两个包负重30多斤，再加上很陡的上坡，我能力也有限，走了半个多小时腰就明显开始酸了，心率从130到160+，喘得不行。后面轩轩小伙接力，一直背着2个包走，坡比我走的还要陡，身体素质是真的强，解决了大问题。再后来二组的小伙伴也来帮忙，昊哥、鹏哥、balance和其他小伙伴都接力分担。大家大多初次相识，勇于出手相助，让我突然意识到，原来徒步穿越最大的作用其实不是锻炼身体和游玩，而是激发善意。而这些东西在城市生活久了，可能我们自己都已经忘了。靠着团队的力量，郝哥也顺利完成了第一天的11公里山地穿越。<br><img src="/images/神农架穿越/分担.jpeg" alt></p>
<h4 id="3-挑战自我：吃虫、攀岩"><a href="#3-挑战自我：吃虫、攀岩" class="headerlink" title="3. 挑战自我：吃虫、攀岩"></a>3. 挑战自我：吃虫、攀岩</h4><p>第二天早上直接两个挑战吃虫和户外攀岩对大部分人还说都是第一次，但是从大家脸上看到的更多是兴奋，甚至是有点渴望。说实话，教官刚拿出来一条做演示的时候，我还是心态很平衡的，但是当一整盒“蛆”摆在面前的时候我还是大为震撼的。不过很快纠结的内心就被小哥哥小姐姐们垂涎的口水给抚慰了，当我还在自豪搞定2条的时候，听说mumu已经消化了5条！<br>攀岩大家多是小白，近乎垂直的崖壁让我们不敢相信这是前进的“必经之路”。我有一次攀冰的经验，但是事后证明和没有经验也没什么区别……岩点很多，但是每个都很小，踩上去信心不足，不过除了历哥脚趾有伤之外，最终大家都能顺利完成15米的崖壁攀升。<br>这两个挑战中，大家表现出的勇气和探索欲让人印象深刻～<br><img src="/images/神农架穿越/虫子.jpeg" alt><br><img src="/images/神农架穿越/吃虫.jpeg" alt><br><img src="/images/神农架穿越/崖壁.jpeg" alt><br><img src="/images/神农架穿越/崖壁2.jpeg" alt><br><img src="/images/神农架穿越/崖壁3.jpeg" alt></p>
<h4 id="4-篝火夜话"><a href="#4-篝火夜话" class="headerlink" title="4. 篝火夜话"></a>4. 篝火夜话</h4><p>篝火夜话环节的达成要给balance一个赞，在我们吹了一身灰最后火势还是很小之后，balance力挽狂澜，让干柴相互穿插堆叠，很快就让我们拥有了一个可以在0度温暖所有人的篝火。<br>这里不得不插播一下雷人教练教得两个很重要的生存要点：1. 身子暖和的情况下再进睡袋！ 2. 用减压节搭一个结实的三脚架放锅。真是又实用又能狗头保命～  当然还有如何系一个不会松的鞋扣在户外你会发现也是太重要。<br>夜话过程每个人轮流发言，讲了各自的收获和感想，其中balance对自己和团队的思考，晓哥对家庭和自己的反思，都让我受益匪浅。<br><img src="/images/神农架穿越/夜话.jpeg" alt></p>
<h4 id="5-最后时刻登机"><a href="#5-最后时刻登机" class="headerlink" title="5. 最后时刻登机"></a>5. 最后时刻登机</h4><p>因为疫情，我们是今年进入神农架的第一批散客；而这一路，我们又经历了核酸晚出导致连夜急行军（教练带队无数次依然是第一次遇到这种意外情况）；太多意外和让人兴奋的经历后，没想到临别到了机场再遇挑战。我们两天前的20：16分出核酸检测结果，大家都以为是进入机场或过安检在48小时以内即可，但是机场回复是以起飞时间为准的48小时内核酸。上午补做的核酸此时又迟迟出不来，每个人都归家心切，那叫心急如焚。正在大家找机场发动感情攻势的时候做最后的争取时，神奇的事情来了，最后登机时间前7分钟核酸结果居然出来了！立刻分散办理登机手续，手里的机票怎么看都像是中了奖之后的彩票！<br><img src="/images/神农架穿越/机票.jpeg" alt></p>
<p>最后非常非常感谢蔚来NHS铁蓓、sam，不仅要和我们一样经受身心的考验，同时还要忙前忙后帮大家处理行程中的各种问题，还有户外星球的教练员们的努力和付出，让我们真正感受了一把神农架版的荒野大镖客！</p>
<h4 id="其它花絮"><a href="#其它花絮" class="headerlink" title="其它花絮"></a>其它花絮</h4><p><img src="/images/神农架穿越/f11.jpeg" alt><br><img src="/images/神农架穿越/木屋.jpeg" alt><br><img src="/images/神农架穿越/木屋2.jpeg" alt><br><img src="/images/神农架穿越/山.jpeg" alt><br><img src="/images/神农架穿越/山顶.jpeg" alt><br><img src="/images/神农架穿越/登山.jpeg" alt><br><img src="/images/神农架穿越/登山2.jpeg" alt><br><img src="/images/神农架穿越/登山3.jpeg" alt><br><img src="/images/神农架穿越/原始森林.jpeg" alt><br><img src="/images/神农架穿越/原始森林2.jpeg" alt></p>
<p><img src="/images/神农架穿越/终点.jpeg" alt><br><img src="/images/神农架穿越/毕业.jpeg" alt></p>
]]></content>
      <tags>
        <tag>户外</tag>
      </tags>
  </entry>
  <entry>
    <title>开源技术和商业化的思考</title>
    <url>/2022/04/08/%E5%BC%80%E6%BA%90%E6%8A%80%E6%9C%AF%E5%92%8C%E5%95%86%E4%B8%9A%E5%8C%96%E7%9A%84%E6%80%9D%E8%80%83/</url>
    <content><![CDATA[<h3 id="开源技术主要在做两件事"><a href="#开源技术主要在做两件事" class="headerlink" title="开源技术主要在做两件事"></a>开源技术主要在做两件事</h3><ol>
<li>构建能力（控制）：有技术深度。e.g. flink/spark</li>
<li>将能力DSL化（逻辑）：有商业价值。e.g. seatunnel</li>
</ol>
<h3 id="重要性排序："><a href="#重要性排序：" class="headerlink" title="重要性排序："></a>重要性排序：</h3><ol>
<li>定位：定位决定0-1</li>
<li>产品：产品调性决定1-N</li>
<li>团队：团队决定加速度</li>
<li>技术：技术门槛决定使用用户规模</li>
</ol>
<a id="more"></a>
<blockquote>
<p>开源不是天才的甜点，是勤奋者的盛宴</p>
</blockquote>
<blockquote>
<p>不痴迷于性能，专注于创新和社区</p>
</blockquote>
<blockquote>
<p>运营 就是把产品的定位和调性发挥到极致</p>
</blockquote>
<h3 id="基金会能帮助到什么："><a href="#基金会能帮助到什么：" class="headerlink" title="基金会能帮助到什么："></a>基金会能帮助到什么：</h3><ol>
<li>第三方的保护中立：产权中立、贡献中立，品牌中立，协议确认</li>
<li>生态：Apache-&gt;大数据、AI；CNCF-&gt;云原生</li>
</ol>
<h3 id="可持续的闭环——商业"><a href="#可持续的闭环——商业" class="headerlink" title="可持续的闭环——商业"></a>可持续的闭环——商业</h3><ul>
<li>Open-Core 开放核心：核心开源，应用不开源<ul>
<li>易用模式：SaaS、UX、协作工具</li>
<li>企业模式：可伸缩性、安全性、管理和集成</li>
<li>解决方案模式：特定行业case</li>
</ul>
</li>
<li>Professional Service 专业服务：咨询服务<ul>
<li>redhat</li>
</ul>
</li>
<li>Hosting 托管服务：云</li>
<li>Marketplaces 市场<ul>
<li>google play store/webstore</li>
</ul>
</li>
<li>Web3.0？</li>
</ul>
]]></content>
      <tags>
        <tag>开源</tag>
      </tags>
  </entry>
  <entry>
    <title>数据开发领域的点线面体</title>
    <url>/2019/05/12/%E6%95%B0%E6%8D%AE%E5%BC%80%E5%8F%91%E9%A2%86%E5%9F%9F%E7%9A%84%E7%82%B9%E7%BA%BF%E9%9D%A2%E4%BD%93/</url>
    <content><![CDATA[<p>在数据开发领域做了两年左右的时间，因为工作原因，视野只是集中在离线数仓搭建这一小块内容上。两年时间并没有看到更多广阔的发展空间，导致数据开发的工作面越来越窄。为了扭转这个局面，特写此文从宏观上去重新审视这个领域的机会点在哪里。</p>
<blockquote>
<p>分析框架：从得到APP上舶来的“点线面体”分析视角。个人理解，每提升一个维度，都应该有给上一维度“赋能”的能力。</p>
</blockquote>
<h2 id="一张图概括"><a href="#一张图概括" class="headerlink" title="一张图概括"></a>一张图概括</h2><pre class="mermaid" style="text-align: center;">
            graph TD
            A[数据集成]-->C;
B[数据开发]-->C;
K[数据质量]-->C;
L[数据安全]-->C;
M[数据服务]-->C;
C[离线数据生产线]-->E;
O[实时PV]-->D
I[实时UV]-->D
D[实时数据生产线]-->E;
E[存储和查询: 数仓理论体系]-->Z
F[挖掘关系:知识图谱]-->Z
J[挖掘能力:机器学习]-->Z
Z[数据价值]
          </pre>
<a id="more"></a>
<h2 id="点"><a href="#点" class="headerlink" title="点"></a>点</h2><p><strong>点是最具体的，可以直接交付的产品。</strong> 对应到数据仓库开发，就是一个一个具体的指标，离线的 or 实时的。其它领域了解不深入，需要找专家补充。</p>
<h2 id="线"><a href="#线" class="headerlink" title="线"></a>线</h2><p><strong>线应该是点的串联而不是点的和。</strong> 在数据开发领域，对应的就是离线生产线上的一层层的表以及任务调度系统，它们串联了所有的数据指标需求，又抽象了业务实体表，为不同的指标提供统一的数据源。</p>
<h2 id="面"><a href="#面" class="headerlink" title="面"></a>面</h2><p><strong>面既要向上赋能，又是体的组成部分。</strong> 这一层是理论沉淀最多的一层，每一个“面”都应该能独立地为其上的“点”组成的生态赋能。数据仓库建设的一些规范和原则算是这一层的，它保障了无论业务多么复杂，数据都能被合理地（最小认知负担，最小沟通成功，最小存储成本）存储和组织。</p>
<h2 id="体"><a href="#体" class="headerlink" title="体"></a>体</h2><p><strong>体是整个问题域。</strong> “体”定义了问题的边界，一个“体”的沉浮决定了以上几个维度是否还有讨论的必要。在数据开发领域体现为：数据到底有没有价值？体现在哪？是否被不懂数据的人认可？</p>
<h2 id="数据的价值和数据技术的价值"><a href="#数据的价值和数据技术的价值" class="headerlink" title="数据的价值和数据技术的价值"></a>数据的价值和数据技术的价值</h2><p>提到“数据价值”，心里还是有点慌的，因为大多数人心里的数据并没什么具体的价值，在他们眼里，只不过是年终的一份数据报告，或者一个可以查更多数据的“MySQL”而已。</p>
<p>数据技术更是被认为搭一下Hadoop，然后写各种长SQL出报表就是全部能力了。</p>
<p>大部分时候，这可能是现状，但这不应该是全部。</p>
<p>数据的价值在于可以从非业务的视角去看业务，给出“原来还可以这么做！（e.g. AlphaGo / Zero）”“原来A和B之间有一层这样的关系！（e.g. 协同过滤推荐）”这样的答案。只有做到这些，才算是“数据”提供了独有的价值，否则为什么要再去存储这么多的历史数据？</p>
<p>数据技术也是一样，应该先具备数据的视角和数据处理能力，然后用数据的能力去解决业务同学靠勤奋都不能解决的问题。而不是本末倒置，没技术没视角，天天钻业务细节，最后只能给对应的业务线一些众所周知、隔靴搔痒的建议。业务团队不需要多一个特别懂业务的人，团队需要的是能站在新的视角，发现和解决那些业务团队再勤奋也会忽视的问题的人。这才是数据技术的价值所在。</p>
]]></content>
      <categories>
        <category>数据开发</category>
      </categories>
      <tags>
        <tag>数据价值</tag>
        <tag>点线面体</tag>
      </tags>
  </entry>
  <entry>
    <title>认知分层标准以及我们应该争论什么</title>
    <url>/2021/02/01/%E8%AE%A4%E7%9F%A5%E5%88%86%E5%B1%82%E6%A0%87%E5%87%86%E4%BB%A5%E5%8F%8A%E6%88%91%E4%BB%AC%E5%BA%94%E8%AF%A5%E4%BA%89%E8%AE%BA%E4%BB%80%E4%B9%88/</url>
    <content><![CDATA[<h3 id="认知分层"><a href="#认知分层" class="headerlink" title="认知分层"></a>认知分层</h3><p>人和猪的区别是基因的差别，是可以量化的；人和人的区别是认知的区别，是不可以被量化的。认知的不同使我们实际处在不同的平行世界之中。</p>
<p>认知分层由低到高，同一层级的无法互相说服，只有高层对低层的降维打击：</p>
<table>
<thead>
<tr>
<th>认知分层（由低到高）</th>
<th>思考问题模式</th>
<th>解决问题方式</th>
</tr>
</thead>
<tbody>
<tr>
<td>环境</td>
<td>都是别人（环境）的错</td>
<td>换环境</td>
</tr>
<tr>
<td>行为</td>
<td>我还不够努力</td>
<td>再努力一些</td>
</tr>
<tr>
<td>能力</td>
<td>面对问题，总是在找对应的方法</td>
<td>学习新能力，提升自己</td>
</tr>
<tr>
<td>信念价值观</td>
<td>为什么要做？方向对吗？</td>
<td>上升到大环境和自身的资源整合</td>
</tr>
<tr>
<td>身份</td>
<td>思考“我是谁”，明确“我是什么角色”</td>
<td>自我感，由内心出发，主动选择</td>
</tr>
<tr>
<td>愿景</td>
<td>思考生命的意义，世界因我有何不同？</td>
<td>利他思维</td>
</tr>
</tbody>
</table>
<a id="more"></a>
<h3 id="我们应该争论什么？"><a href="#我们应该争论什么？" class="headerlink" title="我们应该争论什么？"></a>我们应该争论什么？</h3><blockquote>
<p>观点=事实×逻辑×动机</p>
<p>注：姚明很高。 这是观点，不是事实。姚明身高226cm才是事实，是可以被证伪的。</p>
</blockquote>
<p>当我们在争论一件事情时，应该先区分哪些内容是事实？哪些内容是逻辑？哪些内容是动机？</p>
<p>然后在争论的过程中拿出双方的“事实”，先对齐“事实”，达成一致；</p>
<p>再找出各自的逻辑推理过程中的不足，对齐；</p>
<p>一般情况下，这时应该可以达成一致的观点了。如果还不行，往往是双方背后的“动机”不同，往往有些人在说“逻辑”时，背后隐含了他的“动机”，是“动机”影响了他说的“逻辑”，这个“动机”很少明说，但是影响极大，需要提前调查和了解，才能理解对方为什么会形成那样的观点。</p>
]]></content>
      <tags>
        <tag>认知</tag>
      </tags>
  </entry>
  <entry>
    <title>说通ABTest的数学逻辑</title>
    <url>/2020/10/27/%E8%AF%B4%E9%80%9AABTest%E7%9A%84%E6%95%B0%E5%AD%A6%E9%80%BB%E8%BE%91/</url>
    <content><![CDATA[<p><img src="https://mmbiz.qpic.cn/sz_mmbiz_jpg/X5cB3w6FrP6SUKsgm7qcghdicNt0bSU4O9Qib9CBica4Ofbhk2Rw5U5tQia1NscRe1aSxlCMuYKEk0p8GqPrpibH2IQ/0?wx_fmt=jpeg" alt="abtest"></p>
<p><a href="https://solnotes.com/2016/10/08/simple-stats-in-abtesting/" target="_blank" rel="noopener">https://solnotes.com/2016/10/08/simple-stats-in-abtesting/</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODEzNjI2NA==&amp;mid=2247487223&amp;idx=1&amp;sn=306598fda6c931e7fbf023cf07959f20&amp;source=41#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU1ODEzNjI2NA==&amp;mid=2247487223&amp;idx=1&amp;sn=306598fda6c931e7fbf023cf07959f20&amp;source=41#wechat_redirect</a><br><a href="https://mp.weixin.qq.com/s?__biz=MzU1ODEzNjI2NA==&amp;mid=2247487225&amp;idx=1&amp;sn=3598f1caf4d3fd5c4a77962a9f86f692&amp;source=41#wechat_redirect" target="_blank" rel="noopener">https://mp.weixin.qq.com/s?__biz=MzU1ODEzNjI2NA==&amp;mid=2247487225&amp;idx=1&amp;sn=3598f1caf4d3fd5c4a77962a9f86f692&amp;source=41#wechat_redirect</a></p>
]]></content>
  </entry>
  <entry>
    <title>走吧，去火星！</title>
    <url>/2019/05/22/%E8%B5%B0%E5%90%A7%EF%BC%8C%E5%8E%BB%E7%81%AB%E6%98%9F%EF%BC%81/</url>
    <content><![CDATA[<p>没有时间解释了！<a href="https://go.nasa.gov/Mars2020Pass" target="_blank" rel="noopener">快上船！</a></p>
<iframe width="980" height="410" src="https://mars.nasa.gov/layout/embed/send-your-name/mars2020/certificate/?cn=781873778280" frameborder="0"></iframe>
]]></content>
      <categories>
        <category>黑科技</category>
      </categories>
      <tags>
        <tag>火星船票</tag>
      </tags>
  </entry>
  <entry>
    <title>跨学科工具箱1——热力学第二定律</title>
    <url>/2021/06/04/%E8%B7%A8%E5%AD%A6%E7%A7%91%E5%B7%A5%E5%85%B7%E7%AE%B11%E2%80%94%E2%80%94%E7%83%AD%E5%8A%9B%E5%AD%A6%E7%AC%AC%E4%BA%8C%E5%AE%9A%E5%BE%8B/</url>
    <content><![CDATA[<p><img src="/images/热力学第二定律.jpg" alt></p>
]]></content>
      <tags>
        <tag>知识模型</tag>
      </tags>
  </entry>
  <entry>
    <title>跨学科工具箱2——系统论</title>
    <url>/2021/06/04/%E8%B7%A8%E5%AD%A6%E7%A7%91%E5%B7%A5%E5%85%B7%E7%AE%B12%E2%80%94%E2%80%94%E7%B3%BB%E7%BB%9F%E8%AE%BA/</url>
    <content><![CDATA[<p><img src="/images/系统论.jpg" alt></p>
]]></content>
      <tags>
        <tag>知识模型</tag>
      </tags>
  </entry>
  <entry>
    <title>zk-snark 零知识证明原理</title>
    <url>/2020/10/27/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h2 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h2><p>问题有两个参与人：prover 和 verifier。<br>其中verifier知道多项式，然而不知道结果，但是给出结果时，verifier有验证方法。<br>prover知道结果，但是要在不告知结果的情况下，证明自己的确知道结果。<br><a id="more"></a></p>
<h2 id="基于的性质"><a href="#基于的性质" class="headerlink" title="基于的性质"></a>基于的性质</h2><p>对于两个d阶的不同的多项式，至多只有d个交叉点。==&gt; verifier随机给定x，如果prover总能给出正确的y，说明prover的确知道多项式的所有参数。</p>
<h2 id="将多项式转换成R1CS-一阶约束系统"><a href="#将多项式转换成R1CS-一阶约束系统" class="headerlink" title="将多项式转换成R1CS 一阶约束系统"></a>将多项式转换成R1CS 一阶约束系统</h2><p>效果：给定解向量s后，只要s能通过每一组a、b、c的验证（符合s.a * s.b - s.c = 0），即说明校验通过</p>
<h2 id="将R1CS转换为QAP（向量点积运算转换为多项式运算）"><a href="#将R1CS转换为QAP（向量点积运算转换为多项式运算）" class="headerlink" title="将R1CS转换为QAP（向量点积运算转换为多项式运算）"></a>将R1CS转换为QAP（向量点积运算转换为多项式运算）</h2><p>目的：简化s的验证过程，从多次向量点积运算改为1次多项式运算，即可完成校验</p>
<h2 id="提供证明而不泄漏知识"><a href="#提供证明而不泄漏知识" class="headerlink" title="提供证明而不泄漏知识"></a>提供证明而不泄漏知识</h2><p>椭圆曲线（待学习）<br>双线性映射（待学习）<br>指数知识假设（待学习）</p>
<p>数学基础太薄弱了，看这篇文章我承认草率了啊……<br><a href="https://www.jianshu.com/p/7b772e5cdaef" target="_blank" rel="noopener">零知识证明 简书</a><br><a href="https://www.atatech.org/articles/176109?flag_data_from=mail_daily_recommend&amp;uid=336024#1" target="_blank" rel="noopener">零知识证明 ATA</a></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>零知识证明</tag>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title>怎么变得越来越差？</title>
    <url>/2021/07/13/%E6%80%8E%E4%B9%88%E5%8F%98%E5%BE%97%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%B7%AE/</url>
    <content><![CDATA[<ol>
<li>应激反应<ol>
<li>急功近利：短视地看问题</li>
<li>线性规划：静态地看问题</li>
<li>自我视角：自我地看问题</li>
<li>追求免费：贪便宜</li>
</ol>
</li>
<li>无目标<ol>
<li>不懂放弃：因为无目标，所以不知道要争什么，进而放弃什么，所以全部都不放弃</li>
</ol>
</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>如何设计一个吸引人的演讲</title>
    <url>/2021/06/03/%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E5%90%B8%E5%BC%95%E4%BA%BA%E7%9A%84%E6%BC%94%E8%AE%B2/</url>
    <content><![CDATA[<p>关于“破冰”和“注意力管理”</p>
<a id="more"></a>
<h2 id="破冰"><a href="#破冰" class="headerlink" title="破冰"></a>破冰</h2><h3 id="在听众认知上戳一个洞"><a href="#在听众认知上戳一个洞" class="headerlink" title="在听众认知上戳一个洞"></a>在听众认知上戳一个洞</h3><h4 id="把听众带入一个场景"><a href="#把听众带入一个场景" class="headerlink" title="把听众带入一个场景"></a>把听众带入一个场景</h4><h4 id="“冒犯”听众：你对“创新”的理解真的对吗？"><a href="#“冒犯”听众：你对“创新”的理解真的对吗？" class="headerlink" title="“冒犯”听众：你对“创新”的理解真的对吗？"></a>“冒犯”听众：你对“创新”的理解真的对吗？</h4><h3 id="收集笑点，而不是设计笑点"><a href="#收集笑点，而不是设计笑点" class="headerlink" title="收集笑点，而不是设计笑点"></a>收集笑点，而不是设计笑点</h3><h2 id="注意力管理"><a href="#注意力管理" class="headerlink" title="注意力管理"></a>注意力管理</h2><h3 id="让听众说几句，互动"><a href="#让听众说几句，互动" class="headerlink" title="让听众说几句，互动"></a>让听众说几句，互动</h3><h3 id="调动听众脑中的画面"><a href="#调动听众脑中的画面" class="headerlink" title="调动听众脑中的画面"></a>调动听众脑中的画面</h3><h3 id="预期之外的获得感"><a href="#预期之外的获得感" class="headerlink" title="预期之外的获得感"></a>预期之外的获得感</h3>]]></content>
      <tags>
        <tag>演讲</tag>
      </tags>
  </entry>
  <entry>
    <title>部署Metabase到Kubernetes集群</title>
    <url>/2020/04/14/%E9%83%A8%E7%BD%B2Metabase%E5%88%B0Kubernetes%E9%9B%86%E7%BE%A4/</url>
    <content><![CDATA[<h3 id="部署Kubernetes集群"><a href="#部署Kubernetes集群" class="headerlink" title="部署Kubernetes集群"></a>部署Kubernetes集群</h3><a id="more"></a>
<ol>
<li><p>初始化集群master</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm reset</span><br><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --kubernetes-version=v1.11.0 ##记录下最后出现的kubeadm join xxxx</span><br><span class="line">mkdir -p $HOME/.kube</span><br><span class="line">sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br></pre></td></tr></table></figure>
</li>
<li><p>添加集群网络</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br><span class="line">kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p>添加slave结点</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubeadm join xxxx ##取自kubeadm init的结果，也可以使用命令生成： kubeadm token create --print-join-command</span><br></pre></td></tr></table></figure>
</li>
<li><p>检查集群部署情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl cluster-info  </span><br><span class="line">kubectl get nodes</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="部署helm"><a href="#部署helm" class="headerlink" title="部署helm"></a>部署helm</h3><ol>
<li><p>部署Tiller（helm服务端）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm init --upgrade -i registry.cn-hangzhou.aliyuncs.com/google_containers/tiller:v2.12.1 --stable-repo-url https://kubernetes.oss-cn-hangzhou.aliyuncs.com/charts ##注意tiller和helm client版本要一致</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 Tiller 的ServiceAccount并绑定cluster-admin角色</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount --namespace kube-system tiller     </span><br><span class="line">kubectl create clusterrolebinding tiller-cluster-rule --clusterrole=cluster-admin --serviceaccount=kube-system:tiller</span><br></pre></td></tr></table></figure>
</li>
<li><p>给 Tiller 的 deployments 添加刚才创建的 ServiceAccount</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl patch deploy --namespace kube-system tiller-deploy -p '&#123;"spec":&#123;"template":&#123;"spec":&#123;"serviceAccount":"tiller"&#125;&#125;&#125;&#125;'</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看 Tiller deployments 资源是否绑定 ServiceAccount以及Tiller 是否安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kubectl get deploy -n kube-system tiller-deploy -o yaml | grep serviceAccount</span><br><span class="line">helm version ##注意tiller和helm client版本要一致</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="部署metabase（VPC环境）"><a href="#部署metabase（VPC环境）" class="headerlink" title="部署metabase（VPC环境）"></a>部署metabase（VPC环境）</h3><ol>
<li><p>在VPC环境外获取metabase Chart文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/helm/charts.git</span><br><span class="line">helm package charts/stable/metabase -d xxxx#本地某目录</span><br></pre></td></tr></table></figure>
</li>
<li><p>在VPC环境外获取metabase image文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull metabase/metabase</span><br><span class="line">docker save metabase/metabase -o metabase.img</span><br></pre></td></tr></table></figure>
</li>
<li><p>手动传入Chart文件和image文件到VPC环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>传入跳板机</span><br><span class="line">scp  -P 28265 metabase.img &#123;user&#125;@&#123;ip&#125;:/home/&#123;user&#125;/metabase</span><br><span class="line">scp  -P 28265 metabase-0.10.2.tgz &#123;user&#125;@&#123;ip&#125;:/home/&#123;user&#125;/metabase</span><br><span class="line"><span class="meta">#</span>传入VPC内（忽略）</span><br></pre></td></tr></table></figure>
</li>
<li><p>进入VPC环境，处理image文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker load -i metabase.img</span><br><span class="line">docker tag metabase/metabase:latest &#123;registry&#125;/metabase/metabase:v0.34.0#这里的&#123;registry&#125;一定要是环境内可通的docker registry，可kubectl describe其它已部署pod查找</span><br><span class="line">docker push &#123;registry&#125;/metabase/metabase:v0.34.0</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="5">
<li><p>修改Chart配置：values.yaml的各项配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">image:</span><br><span class="line">  repository: &#123;registry&#125;/metabase/metabase#这里要和docker tag保持一致</span><br><span class="line">  tag: v0.34.0</span><br><span class="line">  pullPolicy: IfNotPresent</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service:</span><br><span class="line">  name: metabase</span><br><span class="line">  type: NodePort#需要外网访问metabase时，要用NodePort</span><br><span class="line">  externalPort: 80</span><br><span class="line">  internalPort: 3000</span><br><span class="line">  nodePort: 30303#增加NodePort</span><br><span class="line">  annotations:</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">database:</span><br><span class="line">   type: #postgres或mysql</span><br><span class="line">   host: xxxx</span><br><span class="line">   port: xxxx</span><br><span class="line">   dbname: xxxx</span><br><span class="line">   username: xxxx</span><br><span class="line">   password: "xxxxx"#注意这里有引号</span><br></pre></td></tr></table></figure>
</li>
<li><p>安装metabase</p>
</li>
</ol>
  <figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">helm install --name my-bi-release --values=values.yaml ./metabase#chart所在目录</span><br></pre></td></tr></table></figure>
<h3 id="部署中可能会遇到的问题"><a href="#部署中可能会遇到的问题" class="headerlink" title="部署中可能会遇到的问题"></a>部署中可能会遇到的问题</h3><ol>
<li><p>集群初始化问题：–pod-network-cidr=10.244.0.0/16 使用kube-flannel网络时，此参数必须要有</p>
</li>
<li><p>在k8s反复增删node时，需要在对应node执行<code>kubeadm reset</code>，直接删除node会有网络没及时清理的问题。可尝试：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span>重置kubernetes服务，重置网络。删除网络配置，link</span><br><span class="line">kubeadm reset</span><br><span class="line">systemctl stop kubelet</span><br><span class="line">systemctl stop docker</span><br><span class="line">rm -rf /var/lib/cni/</span><br><span class="line">rm -rf /var/lib/kubelet/*</span><br><span class="line">rm -rf /etc/cni/</span><br><span class="line">ifconfig cni0 down</span><br><span class="line">ifconfig flannel.1 down</span><br><span class="line">ifconfig docker0 down</span><br><span class="line">ip link delete cni0</span><br><span class="line">ip link delete flannel.1</span><br><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>
</li>
</ol>
<ol start="3">
<li><p>k8s账号权限问题：每个服务要有对应的ServiceAccount并赋予权限</p>
</li>
<li><p>Helm pull image error：VPC环境下要改helm values.yaml中的镜像地址为环境内的docker registry，类似<code>{registry}/metabase/metabase:v0.34.0</code></p>
</li>
</ol>
]]></content>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
</search>
